/*
 * FILE : C:\Users\Administrator\Documents\GitHub\test_project\PyWin32\src\win32\src\win32event_swig.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/***********************************************************************
 * $Header$
 * swig_lib/python/python.cfg
 *
 * This file contains coded needed to add variable linking to the
 * Python interpreter.   C variables are added as a new kind of Python
 * datatype.
 *
 * Also contains supporting code for building python under Windows
 * and things like that.
 *
 * $Log$
 * Revision 1.1  2000/03/14 23:34:06  mhammond
 * Needed to modify a standard Swig file to avoid the 'extern "C"' around Python.h (which gets upset when it tries to include whcar.h as part of the new Unicode patches)
 *
 ************************************************************************/

#include "Python.h"

/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

#ifdef NEED_SWIG_VARLINK

typedef struct {
  char  *name;
  PyObject *(*get_attr)(void);
  int (*set_attr)(PyObject *);
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar **vars;
  int      nvars;
  int      maxvars;
} swig_varlinkobject;

/* ----------------------------------------------------------------------
   swig_varlink_repr()

   Function for python repr method
   ---------------------------------------------------------------------- */

static PyObject *
swig_varlink_repr(swig_varlinkobject *v)
{
  v = v;
  return PyString_FromString("<Global variables>");
}

/* ---------------------------------------------------------------------
   swig_varlink_print()

   Print out all of the global variable names
   --------------------------------------------------------------------- */

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags)
{

  int i = 0;
  flags = flags;
  fprintf(fp,"Global variables { ");
  while (v->vars[i]) {
    fprintf(fp,"%s", v->vars[i]->name);
    i++;
    if (v->vars[i]) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

/* --------------------------------------------------------------------
   swig_varlink_getattr
 
   This function gets the value of a variable and returns it as a
   PyObject.   In our case, we'll be looking at the datatype and
   converting into a number or string
   -------------------------------------------------------------------- */

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n)
{
  int i = 0;
  char temp[128];

  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->get_attr)();
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return NULL;
}

/* -------------------------------------------------------------------
   swig_varlink_setattr()

   This function sets the value of a variable.
   ------------------------------------------------------------------- */

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p)
{
  char temp[128];
  int i = 0;
  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->set_attr)(p);
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return 1;
}

statichere PyTypeObject varlinktype = {
/*  PyObject_HEAD_INIT(&PyType_Type)  Note : This doesn't work on some machines */
  PyObject_HEAD_INIT(0)              
  0,
  "varlink",                          /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */

SWIGSTATIC PyObject *
SWIG_newvarlink(void)
{
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  /*  _Py_NewReference(result);  Does not seem to be necessary */
  result->nvars = 0;
  result->maxvars = 64;
  result->vars = (swig_globalvar **) malloc(64*sizeof(swig_globalvar *));
  result->vars[0] = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGSTATIC void
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p))
{
  swig_varlinkobject *v;
  v= (swig_varlinkobject *) p;
	
  if (v->nvars >= v->maxvars -1) {
    v->maxvars = 2*v->maxvars;
    v->vars = (swig_globalvar **) realloc(v->vars,v->maxvars*sizeof(swig_globalvar *));
    if (v->vars == NULL) {
      fprintf(stderr,"SWIG : Fatal error in initializing Python module.\n");
      exit(1);
    }
  }
  v->vars[v->nvars] = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  v->vars[v->nvars]->name = (char *) malloc(strlen(name)+1);
  strcpy(v->vars[v->nvars]->name,name);
  v->vars[v->nvars]->get_attr = get_attr;
  v->vars[v->nvars]->set_attr = set_attr;
  v->nvars++;
  v->vars[v->nvars] = 0;
}

#else
#define SWIG_newvarlink() Py_None
#endif /* SWIG_NEED_VARLINK */
#ifdef NEED_SWIG_PTR
/*****************************************************************************
 * $Header$
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strncpy(temp_type,tp->name,255);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#else
#define SWIG_RegisterMapping(a,b,c)
#endif // NEED_SWIG_PTR
#define SWIG_init    initwin32event

#define SWIG_name    "win32event"

//#define UNICODE
#define _WIN32_WINNT 0x0501

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                            
        if (!PyTuple_Check(target)) {   
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}

#include "PyWinTypes.h"
#ifdef NEED_PYWINOBJECTS_H
#include "PyWinObjects.h"
#endif
#include "tchar.h"
typedef BOOL  BOOLAPI;
typedef DWORD  DWORDAPI;

#define PyHANDLE HANDLE // Use a #define so we can undef it later if we need the true defn.
//typedef HANDLE PyHKEY;
typedef void * NULL_ONLY;

static BOOL MakeHandleList(PyObject *handleList, HANDLE **ppBuf, DWORD *pNumEntries)
{
	if (!PySequence_Check(handleList)) {
		PyErr_SetString(PyExc_TypeError, "Handles must be a list of integers");
		return FALSE;
	}
	DWORD numItems = (DWORD)PySequence_Length(handleList);
	HANDLE *pItems = (HANDLE *)malloc(sizeof(HANDLE) * numItems);
	if (pItems==NULL) {
		PyErr_SetString(PyExc_MemoryError,"Allocating array of handles");
		return FALSE;
	}
	for (DWORD i=0;i<numItems;i++) {
		PyObject *obItem = PySequence_GetItem(handleList, i);
		if (obItem==NULL) {
			free(pItems);
			return FALSE;
		}
		if (!PyWinObject_AsHANDLE(obItem,pItems+i)) {
			Py_DECREF(obItem);
			free(pItems);
			PyErr_SetString(PyExc_TypeError, "Handles must be a list of integers");
			return FALSE;
		}
		Py_DECREF(obItem);
	}
	*ppBuf = pItems;
	*pNumEntries = numItems;
	return TRUE;

}


static PyObject * MyMsgWaitForMultipleObjects(
    PyObject *handleList,
    BOOL fWaitAll,	// wait for all or wait for one 
    DWORD dwMilliseconds,	// time-out interval in milliseconds 
    DWORD dwWakeMask )
{
	DWORD numItems;
	HANDLE *pItems;
	if (!MakeHandleList(handleList, &pItems, &numItems))
		return NULL;
	DWORD rc;
	Py_BEGIN_ALLOW_THREADS
	rc = MsgWaitForMultipleObjects(numItems, pItems, fWaitAll, dwMilliseconds, dwWakeMask);
	Py_END_ALLOW_THREADS
	PyObject *obrc;
	if (rc==(DWORD)0xFFFFFFFF)
		obrc = PyWin_SetAPIError("MsgWaitForMultipleObjects");
	else
		obrc = PyInt_FromLong(rc);
	free(pItems);
	return obrc;
}

static PyObject * MyMsgWaitForMultipleObjectsEx(
    PyObject *handleList,
    DWORD dwMilliseconds,	// time-out interval in milliseconds 
    DWORD dwWakeMask,
    DWORD dwFlags 	// wait flags
 )
{
	DWORD numItems;
	HANDLE *pItems;
	if (!MakeHandleList(handleList, &pItems, &numItems))
		return NULL;
	DWORD rc;

	// @comm This method will no longer raise a COM E_NOTIMPL exception
	// as it is no longer dynamically loaded.
	Py_BEGIN_ALLOW_THREADS
	rc = MsgWaitForMultipleObjectsEx(numItems, pItems, dwMilliseconds, dwWakeMask, dwFlags);
	Py_END_ALLOW_THREADS
	PyObject *obrc;
	if (rc==(DWORD)0xFFFFFFFF)
		obrc = PyWin_SetAPIError("MsgWaitForMultipleObjectsEx");
	else
		obrc = PyInt_FromLong(rc);
	free(pItems);
	return obrc;
}

static PyObject *MyWaitForMultipleObjects(
	PyObject *handleList,
	BOOL bWaitAll,	// wait flag 
	DWORD dwMilliseconds 	// time-out interval in milliseconds 
   )
{
	DWORD numItems;
	HANDLE *pItems;
	if (!MakeHandleList(handleList, &pItems, &numItems))
		return NULL;
	DWORD rc;
	Py_BEGIN_ALLOW_THREADS
	rc = WaitForMultipleObjects(numItems, pItems, bWaitAll, dwMilliseconds);
	Py_END_ALLOW_THREADS
	PyObject *obrc;
	if (rc==WAIT_FAILED)
		obrc = PyWin_SetAPIError("WaitForMultipleObjects");
	else
		obrc = PyInt_FromLong(rc);
	free(pItems);
	return obrc;
}


static PyObject *MyWaitForMultipleObjectsEx(
	PyObject *handleList,
	BOOL bWaitAll,	// wait flag 
	DWORD dwMilliseconds, 	// time-out interval in milliseconds 
	BOOL bAlertable 	// alertable wait flag 
   )
{
	DWORD numItems;
	HANDLE *pItems;
	if (!MakeHandleList(handleList, &pItems, &numItems))
		return NULL;
	DWORD rc;
	Py_BEGIN_ALLOW_THREADS
	rc = WaitForMultipleObjectsEx(numItems, pItems, bWaitAll, dwMilliseconds,bAlertable);
	Py_END_ALLOW_THREADS
	PyObject *obrc;
	if (rc==WAIT_FAILED)
		obrc = PyWin_SetAPIError("WaitForMultipleObjectsEx");
	else
		obrc = PyInt_FromLong(rc);
	free(pItems);
	return obrc;
}
typedef DWORD  DWORD_WAITAPI;
static PyObject *_wrap_CancelWaitableTimer(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:CancelWaitableTimer",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
          _result = (BOOLAPI )CancelWaitableTimer(_arg0);

      if (!_result)  {
           
           return PyWin_SetAPIError("CancelWaitableTimer");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_CreateEvent(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    SECURITY_ATTRIBUTES * _arg0;
    BOOL  _arg1;
    BOOL  _arg2;
    TCHAR * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg3 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiiO:CreateEvent",&_obj0,&_arg1,&_arg2,&_obj3)) 
        return NULL;
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj3, &_arg3, TRUE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )CreateEvent(_arg0,_arg1,_arg2,_arg3);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg3);
}

           return PyWin_SetAPIError("CreateEvent");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg3);
}
    return _resultobj;
}

static PyObject *_wrap_CreateMutex(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    SECURITY_ATTRIBUTES * _arg0;
    BOOL  _arg1;
    TCHAR * _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiO:CreateMutex",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, TRUE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )CreateMutex(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg2);
}

           return PyWin_SetAPIError("CreateMutex");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_CreateSemaphore(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    SECURITY_ATTRIBUTES * _arg0;
    LONG  _arg1;
    LONG  _arg2;
    TCHAR * _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj3 = 0;

    self = self;
{
	_arg3 = NULL;
}
    if(!PyArg_ParseTuple(args,"OllO:CreateSemaphore",&_obj0,&_arg1,&_arg2,&_obj3)) 
        return NULL;
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj3, &_arg3, TRUE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )CreateSemaphore(_arg0,_arg1,_arg2,_arg3);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg3);
}

           return PyWin_SetAPIError("CreateSemaphore");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg3);
}
    return _resultobj;
}

static PyObject *_wrap_CreateWaitableTimer(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    SECURITY_ATTRIBUTES * _arg0;
    BOOL  _arg1;
    TCHAR * _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiO:CreateWaitableTimer",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, TRUE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )CreateWaitableTimer(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg2);
}

           return PyWin_SetAPIError("CreateWaitableTimer");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_MsgWaitForMultipleObjects(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    PyObject * _arg0;
    BOOL  _arg1;
    DWORD  _arg2;
    DWORD  _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OiOO:MsgWaitForMultipleObjects",&_obj0,&_arg1,&_obj2,&_obj3)) 
        return NULL;
{
  _arg0 = _obj0;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj2);
		if (tmpLong == NULL)
			return NULL;
		_arg2 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg2 = PyLong_AsUnsignedLongMask(_obj2);
	#endif
	if (_arg2==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj3);
		if (tmpLong == NULL)
			return NULL;
		_arg3 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg3 = PyLong_AsUnsignedLongMask(_obj3);
	#endif
	if (_arg3==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (PyObject *)MyMsgWaitForMultipleObjects(_arg0,_arg1,_arg2,_arg3);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
    return _resultobj;
}

static PyObject *_wrap_MsgWaitForMultipleObjectsEx(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    PyObject * _arg0;
    DWORD  _arg1;
    DWORD  _arg2;
    DWORD  _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OOOO:MsgWaitForMultipleObjectsEx",&_obj0,&_obj1,&_obj2,&_obj3)) 
        return NULL;
{
  _arg0 = _obj0;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj2);
		if (tmpLong == NULL)
			return NULL;
		_arg2 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg2 = PyLong_AsUnsignedLongMask(_obj2);
	#endif
	if (_arg2==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj3);
		if (tmpLong == NULL)
			return NULL;
		_arg3 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg3 = PyLong_AsUnsignedLongMask(_obj3);
	#endif
	if (_arg3==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (PyObject *)MyMsgWaitForMultipleObjectsEx(_arg0,_arg1,_arg2,_arg3);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
    return _resultobj;
}

static PyObject *_wrap_OpenEvent(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    DWORD  _arg0;
    BOOL  _arg1;
    TCHAR * _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiO:OpenEvent",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, FALSE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )OpenEvent(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg2);
}

           return PyWin_SetAPIError("OpenEvent");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_OpenMutex(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    DWORD  _arg0;
    BOOL  _arg1;
    TCHAR * _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiO:OpenMutex",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, FALSE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )OpenMutex(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg2);
}

           return PyWin_SetAPIError("OpenMutex");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_OpenSemaphore(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    DWORD  _arg0;
    BOOL  _arg1;
    TCHAR * _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiO:OpenSemaphore",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, FALSE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )OpenSemaphore(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg2);
}

           return PyWin_SetAPIError("OpenSemaphore");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_OpenWaitableTimer(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    DWORD  _arg0;
    BOOL  _arg1;
    TCHAR * _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiO:OpenWaitableTimer",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, FALSE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )OpenWaitableTimer(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg2);
}

           return PyWin_SetAPIError("OpenWaitableTimer");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_PulseEvent(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:PulseEvent",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
          _result = (BOOLAPI )PulseEvent(_arg0);

      if (!_result)  {
           
           return PyWin_SetAPIError("PulseEvent");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_ReleaseMutex(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:ReleaseMutex",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
          _result = (BOOLAPI )ReleaseMutex(_arg0);

      if (!_result)  {
           
           return PyWin_SetAPIError("ReleaseMutex");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_ReleaseSemaphore(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    LONG  _arg1;
    long * _arg2;
    long  temp;
    PyObject * _obj0 = 0;

    self = self;
{
  _arg2 = &temp;
}
    if(!PyArg_ParseTuple(args,"Ol:ReleaseSemaphore",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
          _result = (BOOLAPI )ReleaseSemaphore(_arg0,_arg1,_arg2);

      if (!_result)  {
           
           return PyWin_SetAPIError("ReleaseSemaphore");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg2));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
    return _resultobj;
}

static PyObject *_wrap_ResetEvent(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:ResetEvent",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
          _result = (BOOLAPI )ResetEvent(_arg0);

      if (!_result)  {
           
           return PyWin_SetAPIError("ResetEvent");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_SetEvent(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:SetEvent",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
          _result = (BOOLAPI )SetEvent(_arg0);

      if (!_result)  {
           
           return PyWin_SetAPIError("SetEvent");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_SetWaitableTimer(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    LARGE_INTEGER * _arg1;
    long  _arg2;
    PTIMERAPCROUTINE * _arg3;
    NULL_ONLY  _arg4;
    BOOL  _arg5;
    PyObject * _obj0 = 0;
    LARGE_INTEGER  temp;
    PyObject * _obj1 = 0;
    PTIMERAPCROUTINE  temp0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OOlOOi:SetWaitableTimer",&_obj0,&_obj1,&_arg2,&_obj3,&_obj4,&_arg5)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	_arg1 = &temp;
	if (!PyWinObject_AsLARGE_INTEGER(_obj1, _arg1))
		return NULL;
}
{
	if (_obj3 != Py_None) {
		PyErr_SetString(PyExc_TypeError, "This param must be None");
		return NULL;
	}
    temp0 = NULL;
	_arg3 = &temp0;
}
{
	if (_obj4 != Py_None) {
		PyErr_SetString(PyExc_TypeError, "This param must be None");
		return NULL;
	}
	_arg4 = NULL;
}
{
          _result = (BOOLAPI )SetWaitableTimer(_arg0,_arg1,_arg2,*_arg3,_arg4,_arg5);

      if (!_result)  {
           
           return PyWin_SetAPIError("SetWaitableTimer");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_SignalObjectAndWait(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    PyHANDLE  _arg1;
    DWORD  _arg2;
    BOOL  _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OOOi:SignalObjectAndWait",&_obj0,&_obj1,&_obj2,&_arg3)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsHANDLE(_obj1, &_arg1))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj2);
		if (tmpLong == NULL)
			return NULL;
		_arg2 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg2 = PyLong_AsUnsignedLongMask(_obj2);
	#endif
	if (_arg2==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
          _result = (BOOLAPI )SignalObjectAndWait(_arg0,_arg1,_arg2,_arg3);

      if (!_result)  {
           
           return PyWin_SetAPIError("SignalObjectAndWait");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_WaitForMultipleObjects(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    PyObject * _arg0;
    BOOL  _arg1;
    DWORD  _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OiO:WaitForMultipleObjects",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
  _arg0 = _obj0;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj2);
		if (tmpLong == NULL)
			return NULL;
		_arg2 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg2 = PyLong_AsUnsignedLongMask(_obj2);
	#endif
	if (_arg2==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (PyObject *)MyWaitForMultipleObjects(_arg0,_arg1,_arg2);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
    return _resultobj;
}

static PyObject *_wrap_WaitForMultipleObjectsEx(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    PyObject * _arg0;
    BOOL  _arg1;
    DWORD  _arg2;
    BOOL  _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OiOi:WaitForMultipleObjectsEx",&_obj0,&_arg1,&_obj2,&_arg3)) 
        return NULL;
{
  _arg0 = _obj0;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj2);
		if (tmpLong == NULL)
			return NULL;
		_arg2 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg2 = PyLong_AsUnsignedLongMask(_obj2);
	#endif
	if (_arg2==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (PyObject *)MyWaitForMultipleObjectsEx(_arg0,_arg1,_arg2,_arg3);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
    return _resultobj;
}

static PyObject *_wrap_WaitForSingleObject(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD_WAITAPI  _result;
    PyHANDLE  _arg0;
    DWORD  _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OO:WaitForSingleObject",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (DWORD_WAITAPI )WaitForSingleObject(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (_result==WAIT_FAILED)  {
           
           return PyWin_SetAPIError("WaitForSingleObject");
      }
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_WaitForSingleObjectEx(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD_WAITAPI  _result;
    PyHANDLE  _arg0;
    DWORD  _arg1;
    BOOL  _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OOi:WaitForSingleObjectEx",&_obj0,&_obj1,&_arg2)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (DWORD_WAITAPI )WaitForSingleObjectEx(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==WAIT_FAILED)  {
           
           return PyWin_SetAPIError("WaitForSingleObjectEx");
      }
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_WaitForInputIdle(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD_WAITAPI  _result;
    HANDLE  _arg0;
    DWORD  _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OO:WaitForInputIdle",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (DWORD_WAITAPI )WaitForInputIdle(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (_result==WAIT_FAILED)  {
           
           return PyWin_SetAPIError("WaitForInputIdle");
      }
}    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyMethodDef win32eventMethods[] = {
	 { "WaitForInputIdle", _wrap_WaitForInputIdle, 1 },
	 { "WaitForSingleObjectEx", _wrap_WaitForSingleObjectEx, 1 },
	 { "WaitForSingleObject", _wrap_WaitForSingleObject, 1 },
	 { "WaitForMultipleObjectsEx", _wrap_WaitForMultipleObjectsEx, 1 },
	 { "WaitForMultipleObjects", _wrap_WaitForMultipleObjects, 1 },
	 { "SignalObjectAndWait", _wrap_SignalObjectAndWait, 1 },
	 { "SetWaitableTimer", _wrap_SetWaitableTimer, 1 },
	 { "SetEvent", _wrap_SetEvent, 1 },
	 { "ResetEvent", _wrap_ResetEvent, 1 },
	 { "ReleaseSemaphore", _wrap_ReleaseSemaphore, 1 },
	 { "ReleaseMutex", _wrap_ReleaseMutex, 1 },
	 { "PulseEvent", _wrap_PulseEvent, 1 },
	 { "OpenWaitableTimer", _wrap_OpenWaitableTimer, 1 },
	 { "OpenSemaphore", _wrap_OpenSemaphore, 1 },
	 { "OpenMutex", _wrap_OpenMutex, 1 },
	 { "OpenEvent", _wrap_OpenEvent, 1 },
	 { "MsgWaitForMultipleObjectsEx", _wrap_MsgWaitForMultipleObjectsEx, 1 },
	 { "MsgWaitForMultipleObjects", _wrap_MsgWaitForMultipleObjects, 1 },
	 { "CreateWaitableTimer", _wrap_CreateWaitableTimer, 1 },
	 { "CreateSemaphore", _wrap_CreateSemaphore, 1 },
	 { "CreateMutex", _wrap_CreateMutex, 1 },
	 { "CreateEvent", _wrap_CreateEvent, 1 },
	 { "CancelWaitableTimer", _wrap_CancelWaitableTimer, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
#if (PY_VERSION_HEX < 0x03000000)
#define MODINIT_ERROR_RETURN
SWIGEXPORT(void,initwin32event)() {
#else
#define MODINIT_ERROR_RETURN NULL
SWIGEXPORT(PyObject*,  PyInit_win32event)(void) {
#endif
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
#if (PY_VERSION_HEX < 0x03000000)
	 m = Py_InitModule("win32event", win32eventMethods);
	 d = PyModule_GetDict(m);
#else
  static PyModuleDef win32event_def = {
    PyModuleDef_HEAD_INIT,
      "win32event",
      "",
      -1,
      win32eventMethods,
      };
  m = PyModule_Create(&win32event_def);
  if (!m)
    return NULL;
  d = PyModule_GetDict(m);
  if (!d)
    return NULL;
#endif

#ifndef SWIG_PYTHONCOM
/* This code only valid if non COM SWIG builds */
#ifndef PYCOM_EXPORT
	 PyDict_SetItemString(d,"UNICODE", PyInt_FromLong(
#ifdef UNICODE
	1
#else
	0
#endif
	));
#endif
  PyWinGlobals_Ensure();
  PyDict_SetItemString(d, "error", PyWinExc_ApiError);
#endif SWIG_PYTHONCOM
	 PyDict_SetItemString(d,"WAIT_FAILED", PyInt_FromLong((long) WAIT_FAILED));
	 PyDict_SetItemString(d,"WAIT_OBJECT_0", PyInt_FromLong((long) WAIT_OBJECT_0));
	 PyDict_SetItemString(d,"WAIT_ABANDONED", PyInt_FromLong((long) WAIT_ABANDONED));
	 PyDict_SetItemString(d,"WAIT_ABANDONED_0", PyInt_FromLong((long) WAIT_ABANDONED_0));
	 PyDict_SetItemString(d,"WAIT_TIMEOUT", PyInt_FromLong((long) WAIT_TIMEOUT));
	 PyDict_SetItemString(d,"WAIT_IO_COMPLETION", PyInt_FromLong((long) WAIT_IO_COMPLETION));
	 PyDict_SetItemString(d,"MAXIMUM_WAIT_OBJECTS", PyInt_FromLong((long) MAXIMUM_WAIT_OBJECTS));
	 PyDict_SetItemString(d,"INFINITE", PyInt_FromLong((long) INFINITE));
	 PyDict_SetItemString(d,"QS_ALLEVENTS", PyInt_FromLong((long) QS_ALLEVENTS));
	 PyDict_SetItemString(d,"QS_ALLINPUT", PyInt_FromLong((long) QS_ALLINPUT));
	 PyDict_SetItemString(d,"QS_HOTKEY", PyInt_FromLong((long) QS_HOTKEY));
	 PyDict_SetItemString(d,"QS_INPUT", PyInt_FromLong((long) QS_INPUT));
	 PyDict_SetItemString(d,"QS_KEY", PyInt_FromLong((long) QS_KEY));
	 PyDict_SetItemString(d,"QS_MOUSE", PyInt_FromLong((long) QS_MOUSE));
	 PyDict_SetItemString(d,"QS_MOUSEBUTTON", PyInt_FromLong((long) QS_MOUSEBUTTON));
	 PyDict_SetItemString(d,"QS_MOUSEMOVE", PyInt_FromLong((long) QS_MOUSEMOVE));
	 PyDict_SetItemString(d,"QS_PAINT", PyInt_FromLong((long) QS_PAINT));
	 PyDict_SetItemString(d,"QS_POSTMESSAGE", PyInt_FromLong((long) QS_POSTMESSAGE));
	 PyDict_SetItemString(d,"QS_SENDMESSAGE", PyInt_FromLong((long) QS_SENDMESSAGE));
	 PyDict_SetItemString(d,"QS_TIMER", PyInt_FromLong((long) QS_TIMER));
	 PyDict_SetItemString(d,"EVENT_ALL_ACCESS", PyInt_FromLong((long) EVENT_ALL_ACCESS));
	 PyDict_SetItemString(d,"EVENT_MODIFY_STATE", PyInt_FromLong((long) EVENT_MODIFY_STATE));
	 PyDict_SetItemString(d,"SYNCHRONIZE", PyInt_FromLong((long) SYNCHRONIZE));
#if (PY_VERSION_HEX > 0x03000000)
	return m;
#endif
}
