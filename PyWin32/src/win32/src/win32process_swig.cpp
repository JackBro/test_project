/*
 * FILE : C:\Users\Administrator\Documents\GitHub\test_project\PyWin32\src\win32\src\win32process_swig.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/***********************************************************************
 * $Header$
 * swig_lib/python/python.cfg
 *
 * This file contains coded needed to add variable linking to the
 * Python interpreter.   C variables are added as a new kind of Python
 * datatype.
 *
 * Also contains supporting code for building python under Windows
 * and things like that.
 *
 * $Log$
 * Revision 1.1  2000/03/14 23:34:06  mhammond
 * Needed to modify a standard Swig file to avoid the 'extern "C"' around Python.h (which gets upset when it tries to include whcar.h as part of the new Unicode patches)
 *
 ************************************************************************/

#include "Python.h"

/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

#ifdef NEED_SWIG_VARLINK

typedef struct {
  char  *name;
  PyObject *(*get_attr)(void);
  int (*set_attr)(PyObject *);
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar **vars;
  int      nvars;
  int      maxvars;
} swig_varlinkobject;

/* ----------------------------------------------------------------------
   swig_varlink_repr()

   Function for python repr method
   ---------------------------------------------------------------------- */

static PyObject *
swig_varlink_repr(swig_varlinkobject *v)
{
  v = v;
  return PyString_FromString("<Global variables>");
}

/* ---------------------------------------------------------------------
   swig_varlink_print()

   Print out all of the global variable names
   --------------------------------------------------------------------- */

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags)
{

  int i = 0;
  flags = flags;
  fprintf(fp,"Global variables { ");
  while (v->vars[i]) {
    fprintf(fp,"%s", v->vars[i]->name);
    i++;
    if (v->vars[i]) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

/* --------------------------------------------------------------------
   swig_varlink_getattr
 
   This function gets the value of a variable and returns it as a
   PyObject.   In our case, we'll be looking at the datatype and
   converting into a number or string
   -------------------------------------------------------------------- */

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n)
{
  int i = 0;
  char temp[128];

  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->get_attr)();
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return NULL;
}

/* -------------------------------------------------------------------
   swig_varlink_setattr()

   This function sets the value of a variable.
   ------------------------------------------------------------------- */

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p)
{
  char temp[128];
  int i = 0;
  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->set_attr)(p);
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return 1;
}

statichere PyTypeObject varlinktype = {
/*  PyObject_HEAD_INIT(&PyType_Type)  Note : This doesn't work on some machines */
  PyObject_HEAD_INIT(0)              
  0,
  "varlink",                          /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */

SWIGSTATIC PyObject *
SWIG_newvarlink(void)
{
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  /*  _Py_NewReference(result);  Does not seem to be necessary */
  result->nvars = 0;
  result->maxvars = 64;
  result->vars = (swig_globalvar **) malloc(64*sizeof(swig_globalvar *));
  result->vars[0] = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGSTATIC void
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p))
{
  swig_varlinkobject *v;
  v= (swig_varlinkobject *) p;
	
  if (v->nvars >= v->maxvars -1) {
    v->maxvars = 2*v->maxvars;
    v->vars = (swig_globalvar **) realloc(v->vars,v->maxvars*sizeof(swig_globalvar *));
    if (v->vars == NULL) {
      fprintf(stderr,"SWIG : Fatal error in initializing Python module.\n");
      exit(1);
    }
  }
  v->vars[v->nvars] = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  v->vars[v->nvars]->name = (char *) malloc(strlen(name)+1);
  strcpy(v->vars[v->nvars]->name,name);
  v->vars[v->nvars]->get_attr = get_attr;
  v->vars[v->nvars]->set_attr = set_attr;
  v->nvars++;
  v->vars[v->nvars] = 0;
}

#else
#define SWIG_newvarlink() Py_None
#endif /* SWIG_NEED_VARLINK */
#ifdef NEED_SWIG_PTR
/*****************************************************************************
 * $Header$
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strncpy(temp_type,tp->name,255);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#else
#define SWIG_RegisterMapping(a,b,c)
#endif // NEED_SWIG_PTR
#define SWIG_init    initwin32process

#define SWIG_name    "win32process"

#ifndef MS_WINCE
#include "process.h"
#endif
#include "windows.h"
#include "Psapi.h"
#include "PyWinTypes.h"

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                            
        if (!PyTuple_Check(target)) {   
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}

#include "PyWinTypes.h"
#ifdef NEED_PYWINOBJECTS_H
#include "PyWinObjects.h"
#endif
#include "tchar.h"
typedef BOOL  BOOLAPI;
typedef DWORD  DWORDAPI;

#define PyHANDLE HANDLE // Use a #define so we can undef it later if we need the true defn.
//typedef HANDLE PyHKEY;

#include "structmember.h"

#define CHECK_PFN(fname)if (pfn##fname==NULL) return PyErr_Format(PyExc_NotImplementedError,"%s is not available on this platform", #fname);

typedef BOOL (WINAPI *EnumProcessesfunc)(DWORD *, DWORD, DWORD *);
static EnumProcessesfunc pfnEnumProcesses = NULL;
typedef BOOL (WINAPI *EnumProcessModulesfunc)(HANDLE, HMODULE *, DWORD, LPDWORD);
static EnumProcessModulesfunc pfnEnumProcessModules = NULL;
typedef DWORD (WINAPI *GetModuleFileNameExfunc)(HANDLE, HMODULE, WCHAR *, DWORD);
static GetModuleFileNameExfunc pfnGetModuleFileNameEx = NULL;
typedef DWORD (WINAPI *GetProcessIdfunc)(HANDLE);
static GetProcessIdfunc pfnGetProcessId = NULL;

#ifndef MS_WINCE
typedef BOOL (WINAPI *GetProcessMemoryInfofunc)(HANDLE, PPROCESS_MEMORY_COUNTERS, DWORD);
static GetProcessMemoryInfofunc pfnGetProcessMemoryInfo=NULL;
typedef BOOL (WINAPI *GetProcessTimesfunc)(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);
static GetProcessTimesfunc pfnGetProcessTimes = NULL;
typedef BOOL (WINAPI *GetProcessIoCountersfunc)(HANDLE, PIO_COUNTERS);
static GetProcessIoCountersfunc pfnGetProcessIoCounters = NULL;
typedef BOOL (WINAPI *GetProcessShutdownParametersfunc)(LPDWORD, LPDWORD);
static GetProcessShutdownParametersfunc pfnGetProcessShutdownParameters = NULL;
typedef BOOL (WINAPI *SetProcessShutdownParametersfunc)(DWORD, DWORD);
static SetProcessShutdownParametersfunc pfnSetProcessShutdownParameters = NULL;
typedef BOOL (WINAPI *GetProcessWorkingSetSizefunc)(HANDLE, PSIZE_T, PSIZE_T);
static GetProcessWorkingSetSizefunc pfnGetProcessWorkingSetSize = NULL;
typedef BOOL (WINAPI *SetProcessWorkingSetSizefunc)(HANDLE, SIZE_T, SIZE_T);
static SetProcessWorkingSetSizefunc pfnSetProcessWorkingSetSize = NULL;

typedef HWINSTA (WINAPI *GetProcessWindowStationfunc)(void);
static GetProcessWindowStationfunc pfnGetProcessWindowStation = NULL;
typedef DWORD (WINAPI *GetGuiResourcesfunc)(HANDLE,DWORD);
static GetGuiResourcesfunc pfnGetGuiResources = NULL;
typedef BOOL (WINAPI *GetProcessPriorityBoostfunc)(HANDLE,PBOOL);
static GetProcessPriorityBoostfunc pfnGetProcessPriorityBoost = NULL;
typedef BOOL (WINAPI *SetProcessPriorityBoostfunc)(HANDLE,BOOL);
static SetProcessPriorityBoostfunc pfnSetProcessPriorityBoost = NULL;
typedef BOOL (WINAPI *GetThreadPriorityBoostfunc)(HANDLE,PBOOL);
static GetThreadPriorityBoostfunc pfnGetThreadPriorityBoost = NULL;
typedef BOOL (WINAPI *SetThreadPriorityBoostfunc)(HANDLE,BOOL);
static SetThreadPriorityBoostfunc pfnSetThreadPriorityBoost = NULL;
typedef BOOL (WINAPI *GetThreadIOPendingFlagfunc)(HANDLE,PBOOL);
static GetThreadIOPendingFlagfunc pfnGetThreadIOPendingFlag = NULL;
typedef BOOL (WINAPI *GetThreadTimesfunc)(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME);
static GetThreadTimesfunc pfnGetThreadTimes =  NULL;
typedef	HANDLE (WINAPI *CreateRemoteThreadfunc)(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
static CreateRemoteThreadfunc pfnCreateRemoteThread=NULL;
typedef DWORD (WINAPI *SetThreadIdealProcessorfunc)(HANDLE, DWORD);
static SetThreadIdealProcessorfunc pfnSetThreadIdealProcessor = NULL;
typedef DWORD (WINAPI *SetProcessAffinityMaskfunc)(HANDLE, DWORD_PTR);
static SetProcessAffinityMaskfunc pfnSetProcessAffinityMask = NULL;
typedef BOOL (WINAPI *IsWow64Processfunc)(HANDLE, PBOOL);
static IsWow64Processfunc pfnIsWow64Process = NULL;
#endif

// Support for a STARTUPINFO object.
class PySTARTUPINFO : public PyObject
{
public:
	STARTUPINFO *GetSI() {return &m_startupinfo;}

	PySTARTUPINFO(void);
	PySTARTUPINFO(const STARTUPINFO *pSI);
	~PySTARTUPINFO();

	/* Python support */

	static void deallocFunc(PyObject *ob);

	static PyObject *getattro(PyObject *self, PyObject *obname);
	static int setattro(PyObject *self, PyObject *obname, PyObject *v);
	static struct PyMemberDef members[];

protected:
	STARTUPINFO m_startupinfo;
	PyObject *m_obStdIn, *m_obStdOut, *m_obStdErr;
	PyObject *m_obDesktop, *m_obTitle;
};
#define PySTARTUPINFO_Check(ob)	((ob)->ob_type == &PySTARTUPINFOType)

// @object PySTARTUPINFO|A Python object, representing an STARTUPINFO structure
// @comm Typically you create a PySTARTUPINFO (via <om win32process.STARTUPINFO>) object, and set its properties.
// The object can then be passed to any function which takes an STARTUPINFO object.
PyTypeObject PySTARTUPINFOType =
{
	PYWIN_OBJECT_HEAD
	"PySTARTUPINFO",
	sizeof(PySTARTUPINFO),
	0,
	PySTARTUPINFO::deallocFunc,		/* tp_dealloc */
	0,						/* tp_print */
	0,						/* tp_getattr */
	0,						/* tp_setattr */
	0,						/* tp_compare */
	0,						/* tp_repr */
	0,						/* tp_as_number */
	0,						/* tp_as_sequence */
	0,						/* tp_as_mapping */
	0,						/* tp_hash */
	0,						/* tp_call */
	0,						/* tp_str */
	PySTARTUPINFO::getattro,		/* tp_getattr */
	PySTARTUPINFO::setattro,		/* tp_setattr */
	0,						/*tp_as_buffer*/
	Py_TPFLAGS_DEFAULT,		/* tp_flags */
	"A Python object, representing a STARTUPINFO structure",		/* tp_doc */
	0,						/* tp_traverse */
	0,						/* tp_clear */
	0,						/* tp_richcompare */
	0,						/* tp_weaklistoffset */
	0,						/* tp_iter */
	0,						/* tp_iternext */
	0,						/* tp_methods */
	PySTARTUPINFO::members,		/* tp_members */
	0,						/* tp_getset */
	0,						/* tp_base */
	0,						/* tp_dict */
	0,						/* tp_descr_get */
	0,						/* tp_descr_set */
	0,						/* tp_dictoffset */
	0,						/* tp_init */
	0,						/* tp_alloc */
	0,						/* tp_new */
};

#define OFF(e) offsetof(PySTARTUPINFO, e)

/*static*/ struct PyMemberDef PySTARTUPINFO::members[] = {
	{"dwX",              T_INT,  OFF(m_startupinfo.dwX)}, // @prop integer|dwX|Specifies the x offset, in pixels, of the upper left corner of a window if a new window is created. The offset is from the upper left corner of the screen.
	{"dwY",              T_INT,  OFF(m_startupinfo.dwY)}, // @prop integer|dwY|Specifies the y offset, in pixels, of the upper left corner of a window if a new window is created. The offset is from the upper left corner of the screen. 
	{"dwXSize",          T_INT,  OFF(m_startupinfo.dwXSize)}, // @prop integer|dwXSize|Specifies the width, in pixels, of the window if a new window is created.
	{"dwYSize",          T_INT,  OFF(m_startupinfo.dwYSize)}, // @prop integer|dwYSize|Specifies the height, in pixels, of the window if a new window is created.
	{"dwXCountChars",    T_INT,  OFF(m_startupinfo.dwXCountChars)}, // @prop integer|dwXCountChars|For console processes, if a new console window is created, specifies the screen buffer width in character columns. This value is ignored in a GUI process. 
	{"dwYCountChars",    T_INT,  OFF(m_startupinfo.dwYCountChars)}, // @prop integer|dwYCountChars|For console processes, if a new console window is created, specifies the screen buffer height in character rows.
	{"dwFillAttribute",  T_INT,  OFF(m_startupinfo.dwFillAttribute)}, // @prop integer|dwFillAttribute|Specifies the initial text and background colors if a new console window is created in a console application. These values are ignored in GUI applications
	{"dwFlags",          T_INT,  OFF(m_startupinfo.dwFlags)}, // @prop integer|dwFlags|This is a bit field that determines whether certain STARTUPINFO attributes are used when the process creates a window. To use many of the additional attributes, you typically must set the appropriate mask in this attribute, and also set the attributes themselves. Any combination of the win32con.STARTF_* flags can be specified. 
	{"wShowWindow",	     T_USHORT,  OFF(m_startupinfo.wShowWindow)},//@prop integer|wShowWindow|Can be any of the SW_ constants defined in win32con. For GUI processes, this specifies the default value the first time ShowWindow is called.
	{NULL}
};


PySTARTUPINFO::PySTARTUPINFO()
{
	ob_type = &PySTARTUPINFOType;
	_Py_NewReference(this);
	memset(&m_startupinfo, 0, sizeof(m_startupinfo));
	m_startupinfo.cb = sizeof(m_startupinfo);
	m_obStdIn = m_obStdOut = m_obStdErr = NULL;
	m_obDesktop = m_obTitle = NULL;
}

PySTARTUPINFO::PySTARTUPINFO(const STARTUPINFO *pSI)
{
	ob_type = &PySTARTUPINFOType;
	_Py_NewReference(this);
	memcpy(&m_startupinfo, pSI, sizeof(m_startupinfo));
	m_obStdIn = m_obStdOut = m_obStdErr = NULL;
	if (pSI->lpDesktop)
		m_startupinfo.lpDesktop = PyWin_CopyString(pSI->lpDesktop);
	if (pSI->lpTitle)
		m_startupinfo.lpTitle = PyWin_CopyString(pSI->lpTitle);
}

PySTARTUPINFO::~PySTARTUPINFO(void)
{
	Py_XDECREF(m_obStdIn);
	Py_XDECREF(m_obStdOut);
	Py_XDECREF(m_obStdErr);
	PyWinObject_FreeTCHAR(m_startupinfo.lpDesktop);
	PyWinObject_FreeTCHAR(m_startupinfo.lpTitle);
}

PyObject *gethandle(PyObject *obHandle, HANDLE h)
{
	if (obHandle) {
		Py_INCREF(obHandle);
		return obHandle;
	}
	return PyWinLong_FromHANDLE(h);
}

PyObject *PySTARTUPINFO::getattro(PyObject *self, PyObject *obname)
{
	PySTARTUPINFO *pO = (PySTARTUPINFO *)self;
	char *name=PYWIN_ATTR_CONVERT(obname);
	if (name == NULL)
		return NULL;
	// @prop integer/<o PyHANDLE>|hStdInput|
	// @prop integer/<o PyHANDLE>|hStdOutput|
	// @prop integer/<o PyHANDLE>|hStdError|
	if (strcmp("hStdInput", name)==0)
		return gethandle(pO->m_obStdIn, pO->m_startupinfo.hStdInput);
	if (strcmp("hStdOutput", name)==0)
		return gethandle(pO->m_obStdOut, pO->m_startupinfo.hStdOutput);
	if (strcmp("hStdError", name)==0)
		return gethandle(pO->m_obStdErr, pO->m_startupinfo.hStdError);
	// @prop string/None|lpDesktop|
	if (strcmp("lpDesktop", name)==0)
		return PyWinObject_FromTCHAR(pO->m_startupinfo.lpDesktop);
	// @prop string/None|lpTitle|
	if (strcmp("lpTitle", name)==0)
		return PyWinObject_FromTCHAR(pO->m_startupinfo.lpTitle);
	return PyObject_GenericGetAttr(self, obname);
}

int sethandle(PyObject **pobHandle, HANDLE *ph, PyObject *v)
{
	HANDLE htmp;
	if (!PyWinObject_AsHANDLE(v, &htmp))
		return -1;
	*ph=htmp;
	Py_XDECREF(*pobHandle);
	if (PyHANDLE_Check(v)){
		*pobHandle = v;
		Py_INCREF(v);
		}
	else
		*pobHandle = NULL;
	return 0;
}

int PySTARTUPINFO::setattro(PyObject *self, PyObject *obname, PyObject *v)
{
	if (v == NULL) {
		PyErr_SetString(PyExc_AttributeError, "can't delete STARTUPINFO attributes");
		return -1;
	}
	PySTARTUPINFO *pO = (PySTARTUPINFO *)self;
	char *name=PYWIN_ATTR_CONVERT(obname);
	if (name == NULL)
		return -1;
	if (strcmp("hStdInput", name)==0)
		return sethandle( &pO->m_obStdIn, &pO->m_startupinfo.hStdInput, v);

	if (strcmp("hStdOutput", name)==0)
		return sethandle( &pO->m_obStdOut, &pO->m_startupinfo.hStdOutput, v);

	if (strcmp("hStdError", name)==0)
		return sethandle( &pO->m_obStdErr, &pO->m_startupinfo.hStdError, v);

	if (strcmp("lpDesktop", name)==0) {
		TCHAR *val;
		if (!PyWinObject_AsTCHAR(v, &val, TRUE))
			return -1;
		PyWinObject_FreeTCHAR(pO->m_startupinfo.lpDesktop);
		pO->m_startupinfo.lpDesktop = val;
		return 0;
		}

	if (strcmp("lpTitle", name)==0) {
		TCHAR *val;
		if (!PyWinObject_AsTCHAR(v, &val, TRUE))
			return -1;
		PyWinObject_FreeTCHAR(pO->m_startupinfo.lpTitle);
		pO->m_startupinfo.lpTitle=val;
		return 0;
		}
	return PyObject_GenericSetAttr(self, obname, v);
}

/*static*/ void PySTARTUPINFO::deallocFunc(PyObject *ob)
{
	delete (PySTARTUPINFO *)ob;
}

// A converter.
BOOL PyWinObject_AsSTARTUPINFO(PyObject *ob, STARTUPINFO **ppSI, BOOL bNoneOK /*= TRUE*/)
{
	if (bNoneOK && ob==Py_None) {
		*ppSI = NULL;
	} else if (!PySTARTUPINFO_Check(ob)) {
		PyErr_SetString(PyExc_TypeError, "The object is not a PySTARTUPINFO object");
		return FALSE;
	} else {
		*ppSI = ((PySTARTUPINFO *)ob)->GetSI();
	}
	return TRUE;
}

PyObject *PyWinObject_FromSTARTUPINFO(const STARTUPINFO *pSI)
{
	if (pSI==NULL) {
		Py_INCREF(Py_None);
		return Py_None;
	}
	PyObject *ret = new PySTARTUPINFO(pSI);
	if(ret==NULL)
		PyErr_SetString(PyExc_MemoryError, "PySTARTUPINFO");
	return ret;
}

// @pyswig <o PySTARTUPINFO>|STARTUPINFO|Creates a new STARTUPINFO object.
static PyObject *mySTARTUPINFO(PyObject *self, PyObject *args)
{
	if (!PyArg_ParseTuple(args, ":STARTUPINFO"))
		return NULL;
	return new PySTARTUPINFO();
}

class PythonThreadData
{
public:
	PythonThreadData(PyObject *obFunc, PyObject *args)
		{m_obFunc = obFunc;Py_INCREF(obFunc);m_obArgs=args;Py_INCREF(args);}
	~PythonThreadData() {Py_DECREF(m_obFunc); Py_DECREF(m_obArgs);}
	PyObject *m_obFunc;
	PyObject *m_obArgs;
};

unsigned __stdcall ThreadEntryPoint( void *arg )
{
	CEnterLeavePython _celp;
	PythonThreadData *ptd = (PythonThreadData *)arg;
	PyObject *pyrc = PyEval_CallObject(ptd->m_obFunc, ptd->m_obArgs);
	delete ptd;
	if (pyrc==NULL) {
		fprintf(stderr, "Unhandled exception in beginthreadex created thread:\n");
		PyErr_Print();
		return -1;
	}
	int rc = 0;
	if (PyInt_Check(pyrc))
		rc = PyInt_AsLong(pyrc);
	Py_XDECREF(pyrc);
	return rc;
}

// @pyswig <o PyHANDLE>, int|beginthreadex|Creates a new thread
static PyObject *mybeginthreadex(PyObject *self, PyObject *args)
{
	PyObject *obFunc, *obArgs, *obSA;
	unsigned stackSize, flags;
	if (!PyArg_ParseTuple(args, "OiOOi:beginthreadex",
		&obSA, // @pyparm <o PySECURITY_ATTRIBUTES>|sa||The security attributes, or None
		&stackSize, // @pyparm int|stackSize||Stack size for the new thread, or zero for the default size.
		&obFunc, // @pyparm function|entryPoint||The thread function.
		&obArgs, // @pyparm tuple|args||Args passed to the function.
		&flags)) // @pyparm int|flags||Can be CREATE_SUSPENDED so thread doesn't run immediately
		return NULL;
	if (!PyCallable_Check(obFunc)) {
		PyErr_SetString(PyExc_TypeError, "function must be callable");
		return NULL;
	}
	if (!PyTuple_Check(obArgs)) {
		PyErr_SetString(PyExc_TypeError, "args must be a tuple");
		return NULL;
	}
	SECURITY_ATTRIBUTES *pSA;
	if (!PyWinObject_AsSECURITY_ATTRIBUTES( obSA, &pSA, TRUE ))
		return NULL;

	PyEval_InitThreads();
	PythonThreadData *ptd = new PythonThreadData(obFunc, obArgs);
	ULONG_PTR handle;
	unsigned tid;
	handle = _beginthreadex((void *)pSA, stackSize, ThreadEntryPoint, ptd, flags, &tid);
	if (handle==-1 || handle==NULL){
		delete ptd;
		return PyErr_SetFromErrno(PyExc_RuntimeError);
		}
	// @rdesc The result is a tuple of the thread handle and thread ID.
	return Py_BuildValue("Ni", PyWinObject_FromHANDLE((HANDLE)handle), tid);
}

// @pyswig <o PyHANDLE>, int|CreateRemoteThread|creates a thread that runs in
// the virtual address space of another process.
static PyObject *myCreateRemoteThread(PyObject *self, PyObject *args)
{
	CHECK_PFN(CreateRemoteThread);
#ifdef _WIN64
	static char *fmt="OOLOOk:CreateRemoteThread";
#else
	static char *fmt="OOlOOk:CreateRemoteThread";
#endif

	PyObject *obhprocess, *obFunc, *obParameter, *obSA;
	SIZE_T stackSize;
	DWORD flags;
	HANDLE hprocess;
	LPTHREAD_START_ROUTINE Func;
	VOID *Parameter;
	if (!PyArg_ParseTuple(args, fmt,
		&obhprocess, // @pyparm <o PyHANDLE>|hprocess||The handle to the remote process.
		&obSA, // @pyparm <o PySECURITY_ATTRIBUTES>|sa||The security attributes, or None
		&stackSize, // @pyparm int|stackSize||Stack size for the new thread, or zero for the default size.
		&obFunc, // @pyparm function|entryPoint||The thread function's address.
		&obParameter, // @pyparm int|Parameter||Arg passed to the function in the form of a void pointer
		&flags)) // @pyparm int|flags||
		return NULL;
	if (!PyWinObject_AsHANDLE(obhprocess, &hprocess))
		return NULL;
	if (!PyWinLong_AsVoidPtr(obFunc, (void **)&Func))
		return NULL;
	if (!PyWinLong_AsVoidPtr(obParameter, &Parameter))
		return NULL;
	SECURITY_ATTRIBUTES *pSA;
	if (!PyWinObject_AsSECURITY_ATTRIBUTES( obSA, &pSA, TRUE ))
		return NULL;

	PyEval_InitThreads();
	HANDLE handle;
	DWORD tid;
	handle = (*pfnCreateRemoteThread)(hprocess, pSA, stackSize,
	                                  Func, Parameter,
	                                  flags, &tid);
	if (handle==INVALID_HANDLE_VALUE || handle==NULL) {
		return PyWin_SetAPIError("CreateRemoteThread");
	}
	// @rdesc The result is a tuple of the thread handle and thread ID.
	return Py_BuildValue("Ni", PyWinObject_FromHANDLE(handle), tid);
}


static BOOL CreateEnvironmentString(PyObject *env, LPVOID *ppRet, BOOL *pRetIsUnicode)
{
	BOOL ok = FALSE;
	BOOL bIsUnicode = FALSE;
	if (env==Py_None) {
		*pRetIsUnicode = FALSE;
		*ppRet = NULL;
		return TRUE;
	}
	// First loop counting the size of the environment.
	if (!PyMapping_Check(env)) {
		PyErr_SetString(PyExc_TypeError, "environment parameter must be a dictionary object of strings or unicode objects.");
		return FALSE;
	}
	int i;
	size_t bufLen = 0;
	PyObject *keys = NULL, *vals = NULL;
	Py_ssize_t envLength = PyMapping_Length(env);
	LPVOID result = NULL;
	WCHAR *pUCur;
	char *pACur;

	keys = PyMapping_Keys(env);
	vals = PyMapping_Values(env);
	if (!keys || !vals)
		goto done;

	for (i=0;i<envLength;i++) {
		PyObject *key = PyList_GetItem(keys, i); // no reference
		PyObject *val = PyList_GetItem(vals, i); // no ref.
		if (i==0) {
			if (PyString_Check(key)) {
				bIsUnicode = FALSE;
				bufLen += PyString_Size(key) + 1;
			} else if (PyUnicode_Check(key)) {
				bIsUnicode = TRUE;
				bufLen += PyUnicode_GET_SIZE(key) + 1;
			} else {
				PyErr_SetString(PyExc_TypeError, "dictionary must have keys and values as strings or unicode objects.");
				goto done;
			}
		} else {
			if (bIsUnicode) {
				if (!PyUnicode_Check(key)) {
					PyErr_SetString(PyExc_TypeError, "All dictionary items must be strings, or all must be unicode");
					goto done;
				}
				bufLen += PyUnicode_GET_SIZE(key) + 1;
			}
			else {
				if (!PyString_Check(key)) {
					PyErr_SetString(PyExc_TypeError, "All dictionary items must be strings, or all must be unicode");
					goto done;

				}
				bufLen += PyString_Size(key) + 1;
			}
		}
		if (bIsUnicode) {
			if (!PyUnicode_Check(val)) {
				PyErr_SetString(PyExc_TypeError, "All dictionary items must be strings, or all must be unicode");
				goto done;
			}
			bufLen += PyUnicode_GET_SIZE(val) + 2; // For the '=' and '\0'
		}
		else {
			if (!PyString_Check(val)) {
				PyErr_SetString(PyExc_TypeError, "All dictionary items must be strings, or all must be unicode");
				goto done;
			}
			bufLen += PyString_Size(val) + 2; // For the '=' and '\0'
		}
	}
	result = (LPVOID)malloc( (bIsUnicode ? sizeof(WCHAR) : sizeof(char)) * (bufLen + 1) );
	if (!result) {
		PyErr_SetString(PyExc_MemoryError, "allocating environment buffer");
		goto done;
	}
	pUCur = (WCHAR *)result;
	pACur = (char *)result;
	// Now loop filling it!
	for (i=0;i<envLength;i++) {
		PyObject *key = PyList_GetItem(keys, i);
		PyObject *val = PyList_GetItem(vals, i);
		if (bIsUnicode) {
			WCHAR *pTemp;
			if (!PyWinObject_AsWCHAR(key, &pTemp))
				goto done;
			wcscpy(pUCur, pTemp);
			pUCur += wcslen(pTemp);
			PyWinObject_FreeWCHAR(pTemp);
		} else {
			char *pTemp = PyString_AsString(key);
			strcpy(pACur, pTemp);
			pACur += strlen(pTemp);
		}
		if (bIsUnicode)
			*pUCur++ = L'=';
		else
			*pACur++ = '=';
		if (bIsUnicode) {
			WCHAR *pTemp;
			if (!PyWinObject_AsWCHAR(val, &pTemp))
				goto done;
			wcscpy(pUCur, pTemp);
			pUCur += wcslen(pTemp);
			PyWinObject_FreeWCHAR(pTemp);
		} else {
			char *pTemp = PyString_AsString(val);
			strcpy(pACur, pTemp);
			pACur += strlen(pTemp);
		}
		if (bIsUnicode)
			*pUCur++ = L'\0';
		else
			*pACur++ = '\0';
	}
	if (bIsUnicode) {
		*pUCur++ = L'\0';
//		assert(((unsigned)(pUCur - (WCHAR *)result))==bufLen);
	} else {
		*pACur++ = '\0';
//		assert(((unsigned)(pACur - (char *)result))==bufLen);
	}
	*pRetIsUnicode = bIsUnicode;
	*ppRet = result;
	ok = TRUE;
done:
	if (result && !ok) // failure after allocing buffer.
		free(result);
	Py_XDECREF(keys);
	Py_XDECREF(vals);
	return ok;
}

PyObject *MyCreateProcess(
	TCHAR *appName, 
	TCHAR *cmdLine, 
	SECURITY_ATTRIBUTES *psaP,
	SECURITY_ATTRIBUTES *psaT,
	BOOL bInheritHandles,
	DWORD dwCreationFlags,
	PyObject *environment,
	TCHAR *directory,
	STARTUPINFO *si)
{
	if(!appName && !cmdLine) {
		PyErr_SetString(PyExc_TypeError, "The command line and application parameters can not both be None");
		return NULL;
	}
	PROCESS_INFORMATION pi;
	// Convert the environment.
	LPVOID pEnv;
	BOOL bEnvIsUnicode;
	if (!CreateEnvironmentString(environment, &pEnv, &bEnvIsUnicode))
		return NULL;

#ifndef MS_WINCE
	if (bEnvIsUnicode)
		dwCreationFlags |= CREATE_UNICODE_ENVIRONMENT;
#endif //MS_WINCE

	BOOL ok;
	Py_BEGIN_ALLOW_THREADS
	ok = CreateProcess(appName, cmdLine, psaP, psaT, bInheritHandles, dwCreationFlags, pEnv, directory, si, &pi);
    Py_END_ALLOW_THREADS

	free(pEnv);

	if (!ok)
		return PyWin_SetAPIError("CreateProcess");

	PyObject *ret = PyTuple_New(4);
	PyTuple_SET_ITEM(ret, 0, PyWinObject_FromHANDLE(pi.hProcess));
	PyTuple_SET_ITEM(ret, 1, PyWinObject_FromHANDLE(pi.hThread));
	PyTuple_SET_ITEM(ret, 2, PyInt_FromLong(pi.dwProcessId));
	PyTuple_SET_ITEM(ret, 3, PyInt_FromLong(pi.dwThreadId));
	return ret;
}

PyObject *MyCreateProcessAsUser(
	HANDLE h,
	TCHAR *appName, 
	TCHAR *cmdLine, 
	SECURITY_ATTRIBUTES *psaP,
	SECURITY_ATTRIBUTES *psaT,
	BOOL bInheritHandles,
	DWORD dwCreationFlags,
	PyObject *environment,
	TCHAR *directory,
	STARTUPINFO *si)
{
	if(!appName && !cmdLine) {
		PyErr_SetString(PyExc_TypeError, "The command line and application parameters can not both be None");
		return NULL;
	}
	PROCESS_INFORMATION pi;
	// Convert the environment.
	LPVOID pEnv;
	BOOL bEnvIsUnicode;
	if (!CreateEnvironmentString(environment, &pEnv, &bEnvIsUnicode))
		return NULL;

	if (bEnvIsUnicode)
		dwCreationFlags |= CREATE_UNICODE_ENVIRONMENT;

	BOOL ok;
	Py_BEGIN_ALLOW_THREADS
	ok = CreateProcessAsUser(h, appName, cmdLine, psaP, psaT, bInheritHandles, dwCreationFlags, pEnv, directory, si, &pi);
	Py_END_ALLOW_THREADS
	
	free(pEnv);

	if (!ok)
		return PyWin_SetAPIError("CreateProcessAsUser");

	PyObject *ret = PyTuple_New(4);
	PyTuple_SET_ITEM(ret, 0, PyWinObject_FromHANDLE(pi.hProcess));
	PyTuple_SET_ITEM(ret, 1, PyWinObject_FromHANDLE(pi.hThread));
	PyTuple_SET_ITEM(ret, 2, PyInt_FromLong(pi.dwProcessId));
	PyTuple_SET_ITEM(ret, 3, PyInt_FromLong(pi.dwThreadId));
	return ret;
}

// GetCurrentProcess returns -1 which is INVALID_HANDLE_VALUE, so can't use swig typemap for HANDLE 
// @pyswig int|GetCurrentProcess|Retrieves a pseudo handle for the current process. 
static PyObject *MyGetCurrentProcess(PyObject *self, PyObject *args)
{
	if(!PyArg_ParseTuple(args,":GetCurrentProcess")) 
		return NULL;
	return PyWinLong_FromHANDLE(GetCurrentProcess());
}

// @pyswig bool|GetProcessPriorityBoost|Determines if dynamic priority adjustment is enabled for a process
static PyObject *PyGetProcessPriorityBoost(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessPriorityBoost);
	PyObject *obth;
	HANDLE th;
	BOOL ret;
	if (!PyArg_ParseTuple(args, "O:GetProcessPriorityBoost",
		&obth))		// @pyparm <o PyHANDLE>|Process||Handle to a process
		return NULL;
	if (!PyWinObject_AsHANDLE(obth, &th))
		return NULL;
	if (!(*pfnGetProcessPriorityBoost)(th, &ret))
		return PyWin_SetAPIError("GetProcessPriorityBoost");
	return PyBool_FromLong(ret);
}

// @pyswig |SetProcessPriorityBoost|Enables or disables dynamic priority adjustment for a process
static PyObject *PySetProcessPriorityBoost(PyObject *self, PyObject *args)
{
	CHECK_PFN(SetProcessPriorityBoost);
	PyObject *obth;
	HANDLE th;
	BOOL disable;
	if (!PyArg_ParseTuple(args, "Ol:SetProcessPriorityBoost",
		&obth,		// @pyparm <o PyHANDLE>|Process||Handle to a process
		&disable))	// @pyparm boolean|DisablePriorityBoost||True to disable or False to enable
		return NULL;
	if (!PyWinObject_AsHANDLE(obth, &th))
		return NULL;
	if (!(*pfnSetProcessPriorityBoost)(th, disable))
		return PyWin_SetAPIError("SetProcessPriorityBoost");
	Py_INCREF(Py_None);
	return Py_None;
}

// @pyswig bool|GetThreadPriorityBoost|Determines if dynamic priority adjustment is enabled for a thread
static PyObject *PyGetThreadPriorityBoost(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetThreadPriorityBoost);
	PyObject *obth;
	HANDLE th;
	BOOL ret;
	if (!PyArg_ParseTuple(args, "O:GetThreadPriorityBoost",
		&obth))		// @pyparm <o PyHANDLE>|Thread||Handle to a thread
		return NULL;
	if (!PyWinObject_AsHANDLE(obth, &th))
		return NULL;
	if (!(*pfnGetThreadPriorityBoost)(th, &ret))
		return PyWin_SetAPIError("GetThreadPriorityBoost");
	return PyBool_FromLong(ret);
}

// @pyswig |SetThreadPriorityBoost|Enables or disables dynamic priority adjustment for a thread
static PyObject *PySetThreadPriorityBoost(PyObject *self, PyObject *args)
{
	CHECK_PFN(SetThreadPriorityBoost);
	PyObject *obth;
	HANDLE th;
	BOOL disable;
	if (!PyArg_ParseTuple(args, "Ol:SetThreadPriorityBoost",
		&obth,		// @pyparm <o PyHANDLE>|Thread||Handle to a thread
		&disable))	// @pyparm boolean|DisablePriorityBoost||True to disable or False to enable
		return NULL;
	if (!PyWinObject_AsHANDLE(obth, &th))
		return NULL;
	if (!(*pfnSetThreadPriorityBoost)(th, disable))
		return PyWin_SetAPIError("SetThreadPriorityBoost");
	Py_INCREF(Py_None);
	return Py_None;
}

// @pyswig bool|GetThreadIOPendingFlag|Determines if thread has any outstanding IO requests
static PyObject *PyGetThreadIOPendingFlag(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetThreadIOPendingFlag);
	PyObject *obth;
	HANDLE th;
	BOOL ret;
	if (!PyArg_ParseTuple(args, "O:GetThreadIOPendingFlag",
		&obth))		// @pyparm <o PyHANDLE>|Thread||Handle to a thread
		return NULL;
	if (!PyWinObject_AsHANDLE(obth, &th))
		return NULL;
	if (!(*pfnGetThreadPriorityBoost)(th, &ret))
		return PyWin_SetAPIError("GetThreadIOPendingFlag");
	return PyBool_FromLong(ret);
}

// @pyswig dict|GetThreadTimes|Returns a thread's time statistics
static PyObject *PyGetThreadTimes(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetThreadTimes);
	PyObject *obth;
	HANDLE th;
	FILETIME ft[4];
	if (!PyArg_ParseTuple(args, "O:GetThreadTimes",
		&obth))		// @pyparm <o PyHANDLE>|Thread||Handle to a thread
		return NULL;
	if (!PyWinObject_AsHANDLE(obth, &th))
		return NULL;
	if (!(*pfnGetThreadTimes)(th, &ft[0], &ft[1], &ft[2], &ft[3]))
		return PyWin_SetAPIError("GetThreadTimes");

	// UserTime and KernelTime are elapsed times, return as ints
	ULARGE_INTEGER usertime, kerneltime;
	kerneltime.LowPart=ft[2].dwLowDateTime;
	kerneltime.HighPart=ft[2].dwHighDateTime;
	usertime.LowPart=ft[3].dwLowDateTime;
	usertime.HighPart=ft[3].dwHighDateTime;
	return Py_BuildValue("{s:N, s:N, s:N, s:N}",
		"CreationTime", PyWinObject_FromFILETIME(ft[0]),
		"ExitTime",		PyWinObject_FromFILETIME(ft[1]),
		"KernelTime",	PyLong_FromUnsignedLongLong(kerneltime.QuadPart),
		"UserTime",		PyLong_FromUnsignedLongLong(usertime.QuadPart));
}

// @pyswig int|GetProcessId|Returns the Pid for a process handle
static PyObject *PyGetProcessId(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessId);
	PyObject *obhprocess;
	HANDLE hprocess;
	DWORD pid;
	if (!PyArg_ParseTuple(args, "O:GetProcessId",
		&obhprocess))	// @pyparm <o PyHANDLE>|Process||Handle to a process
		return NULL;
	if (!PyWinObject_AsHANDLE(obhprocess, &hprocess))
		return NULL;
	pid=(*pfnGetProcessId)(hprocess);
	if (pid==0)
		return PyWin_SetAPIError("GetProcessId");
	return PyLong_FromUnsignedLong(pid);
}

// This function does not exist on all platforms.
static PyObject *MySetThreadIdealProcessor( HANDLE hThread, DWORD dwIdealProc )
{
	CHECK_PFN(SetThreadIdealProcessor);
	DWORD rc = (*pfnSetThreadIdealProcessor)(hThread, dwIdealProc);
	if (rc==-1)
		return PyWin_SetAPIError("SetThreadIdealProcessor");
	return PyInt_FromLong(rc);
}

// @pyswig int, int|GetProcessAffinityMask|Gets a processor affinity mask for a specified process
// @rdesc The result is a tuple of (process affinity mask, system affinity mask)
static PyObject *MyGetProcessAffinityMask(PyObject *self, PyObject *args)
{
	HANDLE hProcess;
	PyObject *obhProcess;
	DWORD_PTR processmask, systemmask;
	if (!PyArg_ParseTuple(args, "O:GetProcessAffinityMask",
		&obhProcess))	// @pyparm <o PyHANDLE>|hProcess||handle to the process of interest
		return NULL;
	if (!PyWinObject_AsHANDLE(obhProcess, &hProcess))
		return NULL;
	if (!GetProcessAffinityMask(hProcess, &processmask, &systemmask))
		return PyWin_SetAPIError("GetProcessAffinityMask");
	return Py_BuildValue("NN",
		PyLong_FromUnsignedLongLong(processmask),
		PyLong_FromUnsignedLongLong(systemmask));
}

// Appears to be some problem with the optimizer here, so I just leave it off!
#pragma optimize ("", off)
// @pyswig |SetProcessAffinityMask|Sets a processor affinity mask for a specified process.
// @comm This function does not exist on all platforms.
static PyObject *MySetProcessAffinityMask(PyObject *self, PyObject *args)
{
	CHECK_PFN(SetProcessAffinityMask);
	DWORD_PTR dwMask;
	HANDLE hProcess;
	PyObject *obhProcess;
	// Mask is 64 bits on win64
#ifdef _WIN64
	static char *fmt="OK:SetProcessAffinityMask";
#else
	static char *fmt="Ok:SetProcessAffinityMask";
#endif
	if (!PyArg_ParseTuple(args, fmt,
		&obhProcess,	// @pyparm <o PyHANDLE>|hProcess||handle to the process of interest
		&dwMask))		// @pyparm int|mask||a processor affinity mask
		return NULL;
	if (!PyWinObject_AsHANDLE(obhProcess, &hProcess))
		return NULL;
	if (!(*pfnSetProcessAffinityMask)(hProcess, dwMask))
		return PyWin_SetAPIError("SetProcessAffinityMask");
	Py_INCREF(Py_None);
	return Py_None;
}
#pragma optimize ("", on)

// @pyswig int|SetThreadAffinityMask|Sets a processor affinity mask for a specified thread.
static PyObject *MySetThreadAffinityMask(PyObject *self, PyObject *args)
{
	DWORD_PTR dwMask, prevMask;
	HANDLE hThread;
	PyObject *obhThread;
	// Mask is 64 bits on win64
#ifdef _WIN64
	static char *fmt="OK:SetThreadAffinityMask";
#else
	static char *fmt="Ok:SetThreadAffinityMask";
#endif
	if (!PyArg_ParseTuple(args, fmt,
		&obhThread,		// @pyparm <o PyHANDLE>|hThread||handle to the thread of interest
		&dwMask))		// @pyparm int|ThreadAffinityMask||a processor affinity mask
		return NULL;
	if (!PyWinObject_AsHANDLE(obhThread, &hThread))
		return NULL;
	prevMask=SetThreadAffinityMask(hThread, dwMask);
	if (prevMask==0)
		return PyWin_SetAPIError("SetThreadAffinityMask");
	return PyLong_FromUnsignedLongLong(prevMask);
}
typedef DWORD  DWORD_SR_THREAD;

PyObject *PyEnumProcesses(PyObject *self, PyObject *args)
{
	CHECK_PFN(EnumProcesses);
	DWORD *pids=NULL, *pid=NULL;
	DWORD nbr_pids_allocated=100, nbr_pids_returned=0, tuple_ind=0;
	DWORD bytes_allocated=0,bytes_returned=0;
	PyObject *ret=NULL, *obpid=NULL;
	if (!PyArg_ParseTuple(args, ":EnumProcesses"))
		return NULL;

	// function gives no indicator that not all were returned, so loop until fewer returned than allocated
	do{
		if (pids){
			nbr_pids_allocated*=2;
			free(pids);
			}
		bytes_allocated=nbr_pids_allocated*sizeof(DWORD);
		pids=(DWORD *)malloc(bytes_allocated);
		if (pids==NULL){
			PyErr_SetString(PyExc_MemoryError,"EnumProcesses: unable to allocate Pid list");
			return NULL;
			}
		if (!(*pfnEnumProcesses)(pids, bytes_allocated, &bytes_returned)){
			PyWin_SetAPIError("EnumProcesses",GetLastError());
			goto done;
			}
		nbr_pids_returned=bytes_returned/sizeof(DWORD);
		}
	while (nbr_pids_returned==nbr_pids_allocated);

	ret=PyTuple_New(nbr_pids_returned);
	if (ret==NULL){
		PyErr_SetString(PyExc_MemoryError,"EnumProcesses: unable to allocate return tuple");
		goto done;
		}
	pid=pids;
	for (tuple_ind=0;tuple_ind<nbr_pids_returned;tuple_ind++){
		obpid=Py_BuildValue("l",*pid);
		if (obpid==NULL){
			Py_DECREF(ret);
			ret=NULL;
			goto done;
			}
		PyTuple_SetItem(ret,tuple_ind,obpid);
		pid++;
		}
done:
	if (pids)
		free (pids);
	return ret;
}

PyObject *PyEnumProcessModules(PyObject *self, PyObject *args)
{
	CHECK_PFN(EnumProcessModules);
	HMODULE *hmods=NULL, *hmod=NULL;
	HANDLE hprocess=NULL;
	DWORD nbr_hmods_allocated=100, nbr_hmods_returned=0, tuple_ind=0;
	DWORD bytes_allocated=0,bytes_needed=0;
	PyObject *ret=NULL, *obhmod=NULL, *obhprocess;
	// @pyparm <o PyHANDLE>|hProcess||Process handle as returned by OpenProcess
	if (!PyArg_ParseTuple(args, "O:EnumProcessModules", &obhprocess))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhprocess, &hprocess))
		return NULL;
	bytes_allocated=nbr_hmods_allocated*sizeof(HMODULE);
	do{
		if (hmods){
			free(hmods);
			bytes_allocated=bytes_needed; // unlike EnumProcesses, this one tells you if more space is needed
			}
		hmods=(HMODULE *)malloc(bytes_allocated);
		if (hmods==NULL){
			PyErr_SetString(PyExc_MemoryError,"EnumProcessModules: unable to allocate HMODULE list");
			return NULL;
			}
		if (!(*pfnEnumProcessModules)(hprocess, hmods, bytes_allocated, &bytes_needed)){
			PyWin_SetAPIError("EnumProcessModules",GetLastError());
			goto done;
			}
		}
	while (bytes_needed>bytes_allocated);

	nbr_hmods_returned=bytes_needed/sizeof(HMODULE);
	ret=PyTuple_New(nbr_hmods_returned);
	if (ret==NULL){
		PyErr_SetString(PyExc_MemoryError,"EnumProcessModules: unable to allocate return tuple");
		goto done;
		}
	hmod=hmods;
	for (tuple_ind=0;tuple_ind<nbr_hmods_returned;tuple_ind++){
		obhmod=PyWinLong_FromHANDLE(*hmod);
		if (obhmod==NULL){
			Py_DECREF(ret);
			ret=NULL;
			goto done;
			}
		PyTuple_SET_ITEM(ret,tuple_ind,obhmod);
		hmod++;
		}
done:
	if (hmods)
		free (hmods);
	return ret;
}

PyObject *PyGetModuleFileNameEx(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetModuleFileNameEx);
	WCHAR *fname=NULL;
	DWORD chars_allocated=256, chars_returned=0;
	// chars_allocated=5; // test allocation loop
	HMODULE hmod;
	HANDLE hprocess;
	PyObject *ret=NULL, *obhprocess, *obhmod;
	// @pyparm <o PyHANDLE>|hProcess||Process handle as returned by OpenProcess
	// @pyparm <o PyHANDLE>|hModule||Module handle
	if (!PyArg_ParseTuple(args, "OO:GetModuleFileNameEx", &obhprocess, &obhmod))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhprocess, &hprocess))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhmod, (HANDLE *)&hmod))
		return NULL;

	do{
		if (fname){
			free(fname);
			chars_allocated*=2;
			}
		fname=(WCHAR *)malloc(chars_allocated*sizeof(WCHAR));
		if (fname==NULL){
			PyErr_SetString(PyExc_MemoryError,"GetModuleFileNameEx: unable to allocate WCHAR buffer");
			return NULL;
			}
		chars_returned=(*pfnGetModuleFileNameEx)(hprocess, hmod, fname, chars_allocated);
		if (!chars_returned){
			PyWin_SetAPIError("GetModuleFileNameEx",GetLastError());
			goto done;
			}
		}
	while (chars_returned==chars_allocated);
	ret=PyWinObject_FromWCHAR(fname,chars_returned);

done:
	if (fname)
		free (fname);
	return ret;
}

PyObject *PyGetProcessMemoryInfo(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessMemoryInfo);
	HANDLE hProcess;
	PyObject *obhProcess;
	PROCESS_MEMORY_COUNTERS pmc;
	DWORD cb=sizeof(PROCESS_MEMORY_COUNTERS);
	pmc.cb=cb;

	// @pyparm <o PyHANDLE>|hProcess||Process handle as returned by OpenProcess
	if (!PyArg_ParseTuple(args, "O:GetProcessMemoryInfo", &obhProcess))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhProcess, &hProcess))
		return NULL;

	if (!(*pfnGetProcessMemoryInfo)(hProcess, &pmc, cb)){
		PyWin_SetAPIError("GetProcessMemoryInfo",GetLastError());
		return NULL;
		}
	return Py_BuildValue("{s:k,s:N,s:N,s:N,s:N,s:N,s:N,s:N,s:N}",
		"PageFaultCount", pmc.PageFaultCount,
		"PeakWorkingSetSize", PyLong_FromUnsignedLongLong(pmc.PeakWorkingSetSize),
		"WorkingSetSize", PyLong_FromUnsignedLongLong(pmc.WorkingSetSize),
		"QuotaPeakPagedPoolUsage", PyLong_FromUnsignedLongLong(pmc.QuotaPeakPagedPoolUsage),
		"QuotaPagedPoolUsage", PyLong_FromUnsignedLongLong(pmc.QuotaPagedPoolUsage),
		"QuotaPeakNonPagedPoolUsage", PyLong_FromUnsignedLongLong(pmc.QuotaPeakNonPagedPoolUsage),
		"QuotaNonPagedPoolUsage", PyLong_FromUnsignedLongLong(pmc.QuotaNonPagedPoolUsage),
		"PagefileUsage", PyLong_FromUnsignedLongLong(pmc.PagefileUsage),
		"PeakPagefileUsage", PyLong_FromUnsignedLongLong(pmc.PeakPagefileUsage));
}

PyObject *PyGetProcessTimes(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessTimes);
	HANDLE hProcess;
	PyObject *obhProcess;
	FILETIME CreationTime, ExitTime, KernelTime, UserTime;
	ULARGE_INTEGER ulKernelTime, ulUserTime;
	// @pyparm <o PyHANDLE>|hProcess||Process handle as returned by OpenProcess
	if (!PyArg_ParseTuple(args, "O:GetProcessTimes", &obhProcess))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhProcess, &hProcess))
		return NULL;

	if (!(*pfnGetProcessTimes)(hProcess, &CreationTime, &ExitTime, &KernelTime, &UserTime)){
		PyWin_SetAPIError("GetProcessTimes",GetLastError());
		return NULL;
		}
	memcpy(&ulKernelTime,&KernelTime,sizeof(FILETIME));
	memcpy(&ulUserTime,&UserTime,sizeof(FILETIME));
	return Py_BuildValue("{s:N,s:N,s:N,s:N}",
		"CreationTime", PyWinObject_FromFILETIME(CreationTime),
		"ExitTime", PyWinObject_FromFILETIME(ExitTime),
		"KernelTime", PyLong_FromUnsignedLongLong(ulKernelTime.QuadPart),
		"UserTime", PyLong_FromUnsignedLongLong(ulUserTime.QuadPart));
}

PyObject *PyGetProcessIoCounters(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessIoCounters);
	HANDLE hProcess;
	PyObject *obhProcess;
	IO_COUNTERS ioc;
	// @pyparm <o PyHANDLE>|hProcess||Process handle as returned by OpenProcess
	if (!PyArg_ParseTuple(args, "O:GetProcessIoCounters", &obhProcess))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhProcess, &hProcess))
		return NULL;
	if (!(*pfnGetProcessIoCounters)(hProcess, &ioc)){
		PyWin_SetAPIError("GetProcessIoCounters",GetLastError());
		return NULL;
		}
	return PyWinObject_FromIO_COUNTERS(&ioc);
}

PyObject *PyGetProcessWindowStation(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessWindowStation);
	if (!PyArg_ParseTuple(args, ":GetProcessWindowStation"))
		return NULL;
	HWINSTA hwinsta=(*pfnGetProcessWindowStation)();
	return PyWinObject_FromHANDLE(hwinsta);
}

PyObject *PyGetProcessWorkingSetSize(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessWorkingSetSize);
	SIZE_T MinimumWorkingSetSize=0,MaximumWorkingSetSize=0;
	HANDLE hProcess;
	PyObject *obhProcess;
	// @pyparm <o PyHANDLE>|hProcess||Process handle as returned by <om win32api.OpenProcess>
	if (!PyArg_ParseTuple(args, "O:GetProcessWorkingSetSize", &obhProcess))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhProcess, &hProcess))
		return NULL;
	if (!(*pfnGetProcessWorkingSetSize)(hProcess, &MinimumWorkingSetSize, &MaximumWorkingSetSize)){
		PyWin_SetAPIError("GetProcessWorkingSetSize",GetLastError());
		return NULL;
		}
	// integer promotion happens automatically, so this should work for both 32 and 64-bit SIZE_T
	return Py_BuildValue("NN",
		PyLong_FromUnsignedLongLong(MinimumWorkingSetSize),
		PyLong_FromUnsignedLongLong(MaximumWorkingSetSize));
}

PyObject *PySetProcessWorkingSetSize(PyObject *self, PyObject *args)
{
	CHECK_PFN(SetProcessWorkingSetSize);
	SIZE_T MinimumWorkingSetSize=0,MaximumWorkingSetSize=0;
	HANDLE hProcess;
	PyObject *obhProcess;

#ifdef _WIN64
	static char *fmt="OLL:SetProcessWorkingSetSize";
#else
	static char *fmt="Oll:SetProcessWorkingSetSize";
#endif
	if (!PyArg_ParseTuple(args, fmt,
		&obhProcess,				// @pyparm <o PyHANDLE>|hProcess||Process handle as returned by OpenProcess
		&MinimumWorkingSetSize,		// @pyparm int|MinimumWorkingSetSize||Minimum number of bytes to keep in physical memory
		&MaximumWorkingSetSize))	// @pyparm int|MaximumWorkingSetSize||Maximum number of bytes to keep in physical memory
		return NULL;
	if (!PyWinObject_AsHANDLE(obhProcess, &hProcess))
		return NULL;
	if (!(*pfnSetProcessWorkingSetSize)(hProcess, MinimumWorkingSetSize, MaximumWorkingSetSize))
		return PyWin_SetAPIError("SetProcessWorkingSetSize");
	Py_INCREF(Py_None);
	return Py_None;
}

PyObject *PyGetProcessShutdownParameters(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetProcessShutdownParameters);
	DWORD Level=0, Flags=0;
	if (!PyArg_ParseTuple(args, ":GetProcessShutdownParameters"))
		return NULL;
	if (!(*pfnGetProcessShutdownParameters)(&Level, &Flags)){
		PyWin_SetAPIError("GetProcessShutdownParameters",GetLastError());
		return NULL;
		}
	return Py_BuildValue("ll",Level,Flags);
}

PyObject *PySetProcessShutdownParameters(PyObject *self, PyObject *args)
{
	CHECK_PFN(SetProcessShutdownParameters);
	DWORD Level=0, Flags=0;
	// @pyparm int|Level||Priority, higher means earlier
	// @pyparm int|Flags||Currently only SHUTDOWN_NORETRY valid
	if (!PyArg_ParseTuple(args, "ll:SetProcessShutdownParameters", &Level, &Flags))
		return NULL;
	if (!(*pfnSetProcessShutdownParameters)(Level, Flags)){
		PyWin_SetAPIError("SetProcessShutdownParameters",GetLastError());
		return NULL;
		}
	Py_INCREF(Py_None);
	return Py_None;
}

PyObject *PyGetGuiResources(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetGuiResources);
	HANDLE hprocess;
	DWORD flags, handle_cnt;
	PyObject *obhprocess;
	// @pyparm <o PyHANDLE>|Process||Handle to a process as returned by <om win32api.OpenProcess>
	// @pyparm int|Flags||GR_GDIOBJECTS or GR_USEROBJECTS (from win32con)
	if (!PyArg_ParseTuple(args, "Ok:GetGuiResources", &obhprocess, &flags))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhprocess, &hprocess))
		return NULL;
	handle_cnt=(*pfnGetGuiResources)(hprocess, flags);
	// can return 0 for a non-GUI process with no error occurring
	if ((handle_cnt==0)	&& (GetLastError()!=0))
		return PyWin_SetAPIError("GetGuiResources");
	return PyLong_FromUnsignedLong(handle_cnt);
}

PyObject *PyIsWow64Process(PyObject *self, PyObject *args)
{
	if (pfnIsWow64Process==NULL)
		return PyBool_FromLong(FALSE);
	PyObject *obhprocess = Py_None;
	HANDLE hprocess;
	// @pyparm <o PyHANDLE>|Process|None|Handle to a process as returned by
	// <om win32api.OpenProcess>, <om win32api.GetCurrentProcess>, etc, or
	// will use the current process handle if None (the default) is passed.
	if (!PyArg_ParseTuple(args, "|O:IsWow64Process", &obhprocess))
		return NULL;
	BOOL ret;
	if (obhprocess == Py_None)
		hprocess = ::GetCurrentProcess();
	else if (!PyWinObject_AsHANDLE(obhprocess, &hprocess))
		return NULL;
	BOOL ok = (*pfnIsWow64Process)(hprocess, &ret);
	if (!ok)
		return PyWin_SetAPIError("IsWow64Process");
	return PyBool_FromLong(ret);
}
static PyObject *_wrap_CreateProcess(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    TCHAR * _arg0;
    TCHAR * _arg1;
    SECURITY_ATTRIBUTES * _arg2;
    SECURITY_ATTRIBUTES * _arg3;
    BOOL  _arg4;
    DWORD  _arg5;
    PyObject * _arg6;
    TCHAR * _arg7;
    STARTUPINFO * _arg8;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj5 = 0;
    PyObject * _obj6 = 0;
    PyObject * _obj7 = 0;
    PyObject * _obj8 = 0;

    self = self;
{
	_arg0 = NULL;
}
{
	_arg1 = NULL;
}
{
	_arg7 = NULL;
}
    if(!PyArg_ParseTuple(args,"OOOOiOOOO:CreateProcess",&_obj0,&_obj1,&_obj2,&_obj3,&_arg4,&_obj5,&_obj6,&_obj7,&_obj8)) 
        return NULL;
{
	if (!PyWinObject_AsTCHAR(_obj0, &_arg0, TRUE))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj1, &_arg1, TRUE))
		return NULL;
}
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj2, &_arg2))
		return NULL;
}
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj3, &_arg3))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj5);
		if (tmpLong == NULL)
			return NULL;
		_arg5 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg5 = PyLong_AsUnsignedLongMask(_obj5);
	#endif
	if (_arg5==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
  _arg6 = _obj6;
}
{
	if (!PyWinObject_AsTCHAR(_obj7, &_arg7, TRUE))
		return NULL;
}
{
#ifdef MS_WINCE
	if (_obj8!=Py_None) {
		PyErr_SetString(PyExc_TypeError, "STARTUPINFO is not supported on Windows CE");
		return NULL;
	}
	_arg8 = NULL;
#else
	if (!PyWinObject_AsSTARTUPINFO(_obj8, &_arg8, FALSE))
		return NULL;
#endif
}
    _result = (PyObject *)MyCreateProcess(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
{
	PyWinObject_FreeTCHAR(_arg0);
}
{
	PyWinObject_FreeTCHAR(_arg1);
}
{
	PyWinObject_FreeTCHAR(_arg7);
}
    return _resultobj;
}

static PyObject *_wrap_CreateProcessAsUser(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    HANDLE  _arg0;
    TCHAR * _arg1;
    TCHAR * _arg2;
    SECURITY_ATTRIBUTES * _arg3;
    SECURITY_ATTRIBUTES * _arg4;
    BOOL  _arg5;
    DWORD  _arg6;
    PyObject * _arg7;
    TCHAR * _arg8;
    STARTUPINFO * _arg9;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;
    PyObject * _obj2 = 0;
    PyObject * _obj3 = 0;
    PyObject * _obj4 = 0;
    PyObject * _obj6 = 0;
    PyObject * _obj7 = 0;
    PyObject * _obj8 = 0;
    PyObject * _obj9 = 0;

    self = self;
{
	_arg1 = NULL;
}
{
	_arg2 = NULL;
}
{
	_arg8 = NULL;
}
    if(!PyArg_ParseTuple(args,"OOOOOiOOOO:CreateProcessAsUser",&_obj0,&_obj1,&_obj2,&_obj3,&_obj4,&_arg5,&_obj6,&_obj7,&_obj8,&_obj9)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj1, &_arg1, TRUE))
		return NULL;
}
{
	if (!PyWinObject_AsTCHAR(_obj2, &_arg2, TRUE))
		return NULL;
}
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj3, &_arg3))
		return NULL;
}
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj4, &_arg4))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj6);
		if (tmpLong == NULL)
			return NULL;
		_arg6 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg6 = PyLong_AsUnsignedLongMask(_obj6);
	#endif
	if (_arg6==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
  _arg7 = _obj7;
}
{
	if (!PyWinObject_AsTCHAR(_obj8, &_arg8, TRUE))
		return NULL;
}
{
#ifdef MS_WINCE
	if (_obj9!=Py_None) {
		PyErr_SetString(PyExc_TypeError, "STARTUPINFO is not supported on Windows CE");
		return NULL;
	}
	_arg9 = NULL;
#else
	if (!PyWinObject_AsSTARTUPINFO(_obj9, &_arg9, FALSE))
		return NULL;
#endif
}
    _result = (PyObject *)MyCreateProcessAsUser(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7,_arg8,_arg9);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
{
	PyWinObject_FreeTCHAR(_arg1);
}
{
	PyWinObject_FreeTCHAR(_arg2);
}
{
	PyWinObject_FreeTCHAR(_arg8);
}
    return _resultobj;
}

static PyObject *_wrap_GetProcessVersion(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD  _result;
    DWORD  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:GetProcessVersion",&_obj0)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (DWORD )GetProcessVersion(_arg0);
    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_GetCurrentProcessId(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD  _result;

    self = self;
    if(!PyArg_ParseTuple(args,":GetCurrentProcessId")) 
        return NULL;
    _result = (DWORD )GetCurrentProcessId();
    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_GetStartupInfo(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    STARTUPINFO * _arg0;
    STARTUPINFO  temp;

    self = self;
{
  _arg0 = &temp;
}
    if(!PyArg_ParseTuple(args,":GetStartupInfo")) 
        return NULL;
    GetStartupInfo(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
{
    PyObject *o;
    o = PyWinObject_FromSTARTUPINFO(_arg0);
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
    return _resultobj;
}

static PyObject *_wrap_GetPriorityClass(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD  _result;
    HANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:GetPriorityClass",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
    _result = (DWORD )GetPriorityClass(_arg0);
    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_GetExitCodeThread(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    DWORD * _arg1;
    unsigned long  temp;
    PyObject * _obj0 = 0;

    self = self;
{
  _arg1 = &temp;
}
    if(!PyArg_ParseTuple(args,"O:GetExitCodeThread",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )GetExitCodeThread(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("GetExitCodeThread");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg1));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
    return _resultobj;
}

static PyObject *_wrap_GetExitCodeProcess(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    DWORD * _arg1;
    unsigned long  temp;
    PyObject * _obj0 = 0;

    self = self;
{
  _arg1 = &temp;
}
    if(!PyArg_ParseTuple(args,"O:GetExitCodeProcess",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )GetExitCodeProcess(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("GetExitCodeProcess");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg1));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
    return _resultobj;
}

static PyObject *_wrap_GetWindowThreadProcessId(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    long  _result;
    HWND  _arg0;
    DWORD * _arg1;
    unsigned long  temp;
    PyObject * _obj0 = 0;

    self = self;
{
  _arg1 = &temp;
}
    if(!PyArg_ParseTuple(args,"O:GetWindowThreadProcessId",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, (HANDLE *)&_arg0))
		return NULL;
}
    _result = (long )GetWindowThreadProcessId(_arg0,_arg1);
    _resultobj = Py_BuildValue("l",_result);
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg1));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
    return _resultobj;
}

static PyObject *_wrap_SetThreadPriority(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    int  _arg1;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"Oi:SetThreadPriority",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )SetThreadPriority(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("SetThreadPriority");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_GetThreadPriority(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD  _result;
    HANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:GetThreadPriority",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
    _result = (DWORD )GetThreadPriority(_arg0);
    _resultobj = Py_BuildValue("l",_result);
    return _resultobj;
}

static PyObject *_wrap_SetPriorityClass(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    DWORD  _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OO:SetPriorityClass",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )SetPriorityClass(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("SetPriorityClass");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_AttachThreadInput(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    DWORD  _arg0;
    DWORD  _arg1;
    BOOL  _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OOi:AttachThreadInput",&_obj0,&_obj1,&_arg2)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )AttachThreadInput(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("AttachThreadInput");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_SetThreadIdealProcessor(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    HANDLE  _arg0;
    DWORD  _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OO:SetThreadIdealProcessor",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (PyObject *)MySetThreadIdealProcessor(_arg0,_arg1);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
    return _resultobj;
}

static PyObject *_wrap_SuspendThread(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD_SR_THREAD  _result;
    HANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:SuspendThread",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (DWORD_SR_THREAD )SuspendThread(_arg0);

      Py_END_ALLOW_THREADS
      if (_result==-1)  {
           
           return PyWin_SetAPIError("SuspendThread");
      }
}{
	_resultobj = PyInt_FromLong(_result);
}
    return _resultobj;
}

static PyObject *_wrap_ResumeThread(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD_SR_THREAD  _result;
    HANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:ResumeThread",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (DWORD_SR_THREAD )ResumeThread(_arg0);

      Py_END_ALLOW_THREADS
      if (_result==-1)  {
           
           return PyWin_SetAPIError("ResumeThread");
      }
}{
	_resultobj = PyInt_FromLong(_result);
}
    return _resultobj;
}

static PyObject *_wrap_TerminateProcess(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    DWORD  _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OO:TerminateProcess",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )TerminateProcess(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("TerminateProcess");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_ExitProcess(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    DWORD  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:ExitProcess",&_obj0)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    ExitProcess(_arg0);
    Py_INCREF(Py_None);
    _resultobj = Py_None;
    return _resultobj;
}

static PyMethodDef win32processMethods[] = {
	 { "IsWow64Process", PyIsWow64Process, 1 },
	 { "GetGuiResources", PyGetGuiResources, 1 },
	 { "SetProcessShutdownParameters", PySetProcessShutdownParameters, 1 },
	 { "GetProcessShutdownParameters", PyGetProcessShutdownParameters, 1 },
	 { "SetProcessWorkingSetSize", PySetProcessWorkingSetSize, 1 },
	 { "GetProcessWorkingSetSize", PyGetProcessWorkingSetSize, 1 },
	 { "GetProcessWindowStation", PyGetProcessWindowStation, 1 },
	 { "GetProcessIoCounters", PyGetProcessIoCounters, 1 },
	 { "GetProcessTimes", PyGetProcessTimes, 1 },
	 { "GetProcessMemoryInfo", PyGetProcessMemoryInfo, 1 },
	 { "GetModuleFileNameEx", PyGetModuleFileNameEx, 1 },
	 { "EnumProcessModules", PyEnumProcessModules, 1 },
	 { "EnumProcesses", PyEnumProcesses, 1 },
	 { "ExitProcess", _wrap_ExitProcess, 1 },
	 { "TerminateProcess", _wrap_TerminateProcess, 1 },
	 { "ResumeThread", _wrap_ResumeThread, 1 },
	 { "SuspendThread", _wrap_SuspendThread, 1 },
	 { "SetThreadAffinityMask", MySetThreadAffinityMask, 1 },
	 { "SetProcessAffinityMask", MySetProcessAffinityMask, 1 },
	 { "GetProcessAffinityMask", MyGetProcessAffinityMask, 1 },
	 { "SetThreadIdealProcessor", _wrap_SetThreadIdealProcessor, 1 },
	 { "AttachThreadInput", _wrap_AttachThreadInput, 1 },
	 { "SetPriorityClass", _wrap_SetPriorityClass, 1 },
	 { "GetProcessId", PyGetProcessId, 1 },
	 { "GetThreadTimes", PyGetThreadTimes, 1 },
	 { "GetThreadIOPendingFlag", PyGetThreadIOPendingFlag, 1 },
	 { "SetThreadPriorityBoost", PySetThreadPriorityBoost, 1 },
	 { "GetThreadPriorityBoost", PyGetThreadPriorityBoost, 1 },
	 { "SetProcessPriorityBoost", PySetProcessPriorityBoost, 1 },
	 { "GetProcessPriorityBoost", PyGetProcessPriorityBoost, 1 },
	 { "GetThreadPriority", _wrap_GetThreadPriority, 1 },
	 { "SetThreadPriority", _wrap_SetThreadPriority, 1 },
	 { "GetWindowThreadProcessId", _wrap_GetWindowThreadProcessId, 1 },
	 { "GetExitCodeProcess", _wrap_GetExitCodeProcess, 1 },
	 { "GetExitCodeThread", _wrap_GetExitCodeThread, 1 },
	 { "GetPriorityClass", _wrap_GetPriorityClass, 1 },
	 { "GetStartupInfo", _wrap_GetStartupInfo, 1 },
	 { "GetCurrentProcessId", _wrap_GetCurrentProcessId, 1 },
	 { "GetProcessVersion", _wrap_GetProcessVersion, 1 },
	 { "GetCurrentProcess", MyGetCurrentProcess, 1 },
	 { "CreateProcessAsUser", _wrap_CreateProcessAsUser, 1 },
	 { "CreateProcess", _wrap_CreateProcess, 1 },
	 { "CreateRemoteThread", myCreateRemoteThread, 1 },
	 { "beginthreadex", mybeginthreadex, 1 },
	 { "STARTUPINFO", mySTARTUPINFO, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
#if (PY_VERSION_HEX < 0x03000000)
#define MODINIT_ERROR_RETURN
SWIGEXPORT(void,initwin32process)() {
#else
#define MODINIT_ERROR_RETURN NULL
SWIGEXPORT(PyObject*,  PyInit_win32process)(void) {
#endif
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
#if (PY_VERSION_HEX < 0x03000000)
	 m = Py_InitModule("win32process", win32processMethods);
	 d = PyModule_GetDict(m);
#else
  static PyModuleDef win32process_def = {
    PyModuleDef_HEAD_INIT,
      "win32process",
      "",
      -1,
      win32processMethods,
      };
  m = PyModule_Create(&win32process_def);
  if (!m)
    return NULL;
  d = PyModule_GetDict(m);
  if (!d)
    return NULL;
#endif

#ifndef SWIG_PYTHONCOM
/* This code only valid if non COM SWIG builds */
#ifndef PYCOM_EXPORT
	 PyDict_SetItemString(d,"UNICODE", PyInt_FromLong(
#ifdef UNICODE
	1
#else
	0
#endif
	));
#endif
  PyWinGlobals_Ensure();
  PyDict_SetItemString(d, "error", PyWinExc_ApiError);
#endif SWIG_PYTHONCOM


#if (PY_VERSION_HEX >= 0x03000000)
	if (PyType_Ready(&PySTARTUPINFOType) == -1)
		return NULL;
#endif

	FARPROC fp=NULL;
	HMODULE hmodule=NULL;
	hmodule=GetModuleHandle(_T("Psapi.dll"));
	if (hmodule==NULL)
		hmodule=LoadLibrary(_T("Psapi.dll"));
	if (hmodule!=NULL){
		pfnEnumProcesses = (EnumProcessesfunc)GetProcAddress(hmodule, "EnumProcesses");
		pfnEnumProcessModules = (EnumProcessModulesfunc)GetProcAddress(hmodule, "EnumProcessModules");
		pfnGetModuleFileNameEx = (GetModuleFileNameExfunc)GetProcAddress(hmodule, "GetModuleFileNameExW");
#ifndef MS_WINCE
		pfnGetProcessMemoryInfo = (GetProcessMemoryInfofunc)GetProcAddress(hmodule, "GetProcessMemoryInfo");
#endif
		}

#ifndef MS_WINCE
	hmodule=GetModuleHandle(_T("Kernel32.dll"));
	if (hmodule==NULL)
		hmodule=LoadLibrary(_T("Kernel32.dll"));
	if (hmodule!=NULL){
		pfnGetProcessTimes=(GetProcessTimesfunc)GetProcAddress(hmodule,"GetProcessTimes");
		pfnGetProcessIoCounters=(GetProcessIoCountersfunc)GetProcAddress(hmodule,"GetProcessIoCounters");
		pfnGetProcessShutdownParameters=(GetProcessShutdownParametersfunc)GetProcAddress(hmodule,"GetProcessShutdownParameters");
		pfnSetProcessShutdownParameters=(SetProcessShutdownParametersfunc)GetProcAddress(hmodule,"SetProcessShutdownParameters");
		pfnGetProcessWorkingSetSize=(GetProcessWorkingSetSizefunc)GetProcAddress(hmodule,"GetProcessWorkingSetSize");
		pfnSetProcessWorkingSetSize=(SetProcessWorkingSetSizefunc)GetProcAddress(hmodule,"SetProcessWorkingSetSize");
		pfnGetProcessPriorityBoost=(GetProcessPriorityBoostfunc)GetProcAddress(hmodule,"GetProcessPriorityBoost");
		pfnSetProcessPriorityBoost=(SetProcessPriorityBoostfunc)GetProcAddress(hmodule,"SetProcessPriorityBoost");
		pfnGetThreadPriorityBoost=(GetThreadPriorityBoostfunc)GetProcAddress(hmodule,"GetThreadPriorityBoost");
		pfnSetThreadPriorityBoost=(SetThreadPriorityBoostfunc)GetProcAddress(hmodule,"SetThreadPriorityBoost");
		pfnGetThreadIOPendingFlag=(GetThreadIOPendingFlagfunc)GetProcAddress(hmodule,"GetThreadIOPendingFlag");
		pfnGetThreadTimes=(GetThreadTimesfunc)GetProcAddress(hmodule,"GetThreadTimes");
		pfnCreateRemoteThread=(CreateRemoteThreadfunc)GetProcAddress(hmodule,"CreateRemoteThread");
		pfnSetThreadIdealProcessor=(SetThreadIdealProcessorfunc)GetProcAddress(hmodule,"SetThreadIdealProcessor");
		pfnSetProcessAffinityMask=(SetProcessAffinityMaskfunc)GetProcAddress(hmodule,"SetProcessAffinityMask");
		pfnGetProcessId=(GetProcessIdfunc)GetProcAddress(hmodule, "GetProcessId");
		pfnIsWow64Process=(IsWow64Processfunc)GetProcAddress(hmodule, "IsWow64Process");
		}

	hmodule=GetModuleHandle(_T("User32.dll"));
	if (hmodule==NULL)
		hmodule=LoadLibrary(_T("User32.dll"));
	if (hmodule!=NULL){
		pfnGetProcessWindowStation=(GetProcessWindowStationfunc)GetProcAddress(hmodule,"GetProcessWindowStation");
		pfnGetGuiResources=(GetGuiResourcesfunc)GetProcAddress(hmodule,"GetGuiResources");
		}
#endif	// MS_WINCE

// *sob* - these symbols don't exist in the platform sdk needed to build
// using Python 2.3
#ifndef THREAD_MODE_BACKGROUND_BEGIN
#define THREAD_MODE_BACKGROUND_BEGIN 0x00010000
#endif
#ifndef THREAD_MODE_BACKGROUND_END
#define THREAD_MODE_BACKGROUND_END 0x00020000
#endif
	 PyDict_SetItemString(d,"CREATE_SUSPENDED", PyInt_FromLong((long) CREATE_SUSPENDED));
	 PyDict_SetItemString(d,"MAXIMUM_PROCESSORS", PyInt_FromLong((long) MAXIMUM_PROCESSORS));
	 PyDict_SetItemString(d,"THREAD_PRIORITY_ABOVE_NORMAL", PyInt_FromLong((long) THREAD_PRIORITY_ABOVE_NORMAL));
	 PyDict_SetItemString(d,"THREAD_PRIORITY_BELOW_NORMAL", PyInt_FromLong((long) THREAD_PRIORITY_BELOW_NORMAL));
	 PyDict_SetItemString(d,"THREAD_PRIORITY_HIGHEST", PyInt_FromLong((long) THREAD_PRIORITY_HIGHEST));
	 PyDict_SetItemString(d,"THREAD_PRIORITY_IDLE", PyInt_FromLong((long) THREAD_PRIORITY_IDLE));
	 PyDict_SetItemString(d,"THREAD_PRIORITY_LOWEST", PyInt_FromLong((long) THREAD_PRIORITY_LOWEST));
	 PyDict_SetItemString(d,"THREAD_PRIORITY_NORMAL", PyInt_FromLong((long) THREAD_PRIORITY_NORMAL));
	 PyDict_SetItemString(d,"THREAD_PRIORITY_TIME_CRITICAL", PyInt_FromLong((long) THREAD_PRIORITY_TIME_CRITICAL));
	 PyDict_SetItemString(d,"THREAD_MODE_BACKGROUND_BEGIN", PyInt_FromLong((long) THREAD_MODE_BACKGROUND_BEGIN));
	 PyDict_SetItemString(d,"THREAD_MODE_BACKGROUND_END", PyInt_FromLong((long) THREAD_MODE_BACKGROUND_END));
	 PyDict_SetItemString(d,"CREATE_DEFAULT_ERROR_MODE", PyInt_FromLong((long) CREATE_DEFAULT_ERROR_MODE));
	 PyDict_SetItemString(d,"CREATE_NEW_CONSOLE", PyInt_FromLong((long) CREATE_NEW_CONSOLE));
	 PyDict_SetItemString(d,"CREATE_NEW_PROCESS_GROUP", PyInt_FromLong((long) CREATE_NEW_PROCESS_GROUP));
	 PyDict_SetItemString(d,"CREATE_SEPARATE_WOW_VDM", PyInt_FromLong((long) CREATE_SEPARATE_WOW_VDM));
	 PyDict_SetItemString(d,"CREATE_SHARED_WOW_VDM", PyInt_FromLong((long) CREATE_SHARED_WOW_VDM));
	 PyDict_SetItemString(d,"CREATE_UNICODE_ENVIRONMENT", PyInt_FromLong((long) CREATE_UNICODE_ENVIRONMENT));
	 PyDict_SetItemString(d,"CREATE_BREAKAWAY_FROM_JOB", PyInt_FromLong((long) CREATE_BREAKAWAY_FROM_JOB));
	 PyDict_SetItemString(d,"CREATE_PRESERVE_CODE_AUTHZ_LEVEL", PyInt_FromLong((long) CREATE_PRESERVE_CODE_AUTHZ_LEVEL));
	 PyDict_SetItemString(d,"CREATE_NO_WINDOW", PyInt_FromLong((long) CREATE_NO_WINDOW));
	 PyDict_SetItemString(d,"DEBUG_PROCESS", PyInt_FromLong((long) DEBUG_PROCESS));
	 PyDict_SetItemString(d,"DEBUG_ONLY_THIS_PROCESS", PyInt_FromLong((long) DEBUG_ONLY_THIS_PROCESS));
	 PyDict_SetItemString(d,"DETACHED_PROCESS", PyInt_FromLong((long) DETACHED_PROCESS));
	 PyDict_SetItemString(d,"ABOVE_NORMAL_PRIORITY_CLASS", PyInt_FromLong((long) ABOVE_NORMAL_PRIORITY_CLASS));
	 PyDict_SetItemString(d,"BELOW_NORMAL_PRIORITY_CLASS", PyInt_FromLong((long) BELOW_NORMAL_PRIORITY_CLASS));
	 PyDict_SetItemString(d,"HIGH_PRIORITY_CLASS", PyInt_FromLong((long) HIGH_PRIORITY_CLASS));
	 PyDict_SetItemString(d,"IDLE_PRIORITY_CLASS", PyInt_FromLong((long) IDLE_PRIORITY_CLASS));
	 PyDict_SetItemString(d,"NORMAL_PRIORITY_CLASS", PyInt_FromLong((long) NORMAL_PRIORITY_CLASS));
	 PyDict_SetItemString(d,"REALTIME_PRIORITY_CLASS", PyInt_FromLong((long) REALTIME_PRIORITY_CLASS));
	 PyDict_SetItemString(d,"STARTF_FORCEONFEEDBACK", PyInt_FromLong((long) STARTF_FORCEONFEEDBACK));
	 PyDict_SetItemString(d,"STARTF_FORCEOFFFEEDBACK", PyInt_FromLong((long) STARTF_FORCEOFFFEEDBACK));
	 PyDict_SetItemString(d,"STARTF_RUNFULLSCREEN", PyInt_FromLong((long) STARTF_RUNFULLSCREEN));
	 PyDict_SetItemString(d,"STARTF_USECOUNTCHARS", PyInt_FromLong((long) STARTF_USECOUNTCHARS));
	 PyDict_SetItemString(d,"STARTF_USEFILLATTRIBUTE", PyInt_FromLong((long) STARTF_USEFILLATTRIBUTE));
	 PyDict_SetItemString(d,"STARTF_USEPOSITION", PyInt_FromLong((long) STARTF_USEPOSITION));
	 PyDict_SetItemString(d,"STARTF_USESHOWWINDOW", PyInt_FromLong((long) STARTF_USESHOWWINDOW));
	 PyDict_SetItemString(d,"STARTF_USESIZE", PyInt_FromLong((long) STARTF_USESIZE));
	 PyDict_SetItemString(d,"STARTF_USESTDHANDLES", PyInt_FromLong((long) STARTF_USESTDHANDLES));
#if (PY_VERSION_HEX > 0x03000000)
	return m;
#endif
}
