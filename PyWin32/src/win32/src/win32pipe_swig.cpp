/*
 * FILE : C:\Users\Administrator\Documents\GitHub\test_project\PyWin32\src\win32\src\win32pipe_swig.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/***********************************************************************
 * $Header$
 * swig_lib/python/python.cfg
 *
 * This file contains coded needed to add variable linking to the
 * Python interpreter.   C variables are added as a new kind of Python
 * datatype.
 *
 * Also contains supporting code for building python under Windows
 * and things like that.
 *
 * $Log$
 * Revision 1.1  2000/03/14 23:34:06  mhammond
 * Needed to modify a standard Swig file to avoid the 'extern "C"' around Python.h (which gets upset when it tries to include whcar.h as part of the new Unicode patches)
 *
 ************************************************************************/

#include "Python.h"

/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

#ifdef NEED_SWIG_VARLINK

typedef struct {
  char  *name;
  PyObject *(*get_attr)(void);
  int (*set_attr)(PyObject *);
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar **vars;
  int      nvars;
  int      maxvars;
} swig_varlinkobject;

/* ----------------------------------------------------------------------
   swig_varlink_repr()

   Function for python repr method
   ---------------------------------------------------------------------- */

static PyObject *
swig_varlink_repr(swig_varlinkobject *v)
{
  v = v;
  return PyString_FromString("<Global variables>");
}

/* ---------------------------------------------------------------------
   swig_varlink_print()

   Print out all of the global variable names
   --------------------------------------------------------------------- */

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags)
{

  int i = 0;
  flags = flags;
  fprintf(fp,"Global variables { ");
  while (v->vars[i]) {
    fprintf(fp,"%s", v->vars[i]->name);
    i++;
    if (v->vars[i]) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

/* --------------------------------------------------------------------
   swig_varlink_getattr
 
   This function gets the value of a variable and returns it as a
   PyObject.   In our case, we'll be looking at the datatype and
   converting into a number or string
   -------------------------------------------------------------------- */

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n)
{
  int i = 0;
  char temp[128];

  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->get_attr)();
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return NULL;
}

/* -------------------------------------------------------------------
   swig_varlink_setattr()

   This function sets the value of a variable.
   ------------------------------------------------------------------- */

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p)
{
  char temp[128];
  int i = 0;
  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->set_attr)(p);
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return 1;
}

statichere PyTypeObject varlinktype = {
/*  PyObject_HEAD_INIT(&PyType_Type)  Note : This doesn't work on some machines */
  PyObject_HEAD_INIT(0)              
  0,
  "varlink",                          /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */

SWIGSTATIC PyObject *
SWIG_newvarlink(void)
{
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  /*  _Py_NewReference(result);  Does not seem to be necessary */
  result->nvars = 0;
  result->maxvars = 64;
  result->vars = (swig_globalvar **) malloc(64*sizeof(swig_globalvar *));
  result->vars[0] = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGSTATIC void
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p))
{
  swig_varlinkobject *v;
  v= (swig_varlinkobject *) p;
	
  if (v->nvars >= v->maxvars -1) {
    v->maxvars = 2*v->maxvars;
    v->vars = (swig_globalvar **) realloc(v->vars,v->maxvars*sizeof(swig_globalvar *));
    if (v->vars == NULL) {
      fprintf(stderr,"SWIG : Fatal error in initializing Python module.\n");
      exit(1);
    }
  }
  v->vars[v->nvars] = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  v->vars[v->nvars]->name = (char *) malloc(strlen(name)+1);
  strcpy(v->vars[v->nvars]->name,name);
  v->vars[v->nvars]->get_attr = get_attr;
  v->vars[v->nvars]->set_attr = set_attr;
  v->nvars++;
  v->vars[v->nvars] = 0;
}

#else
#define SWIG_newvarlink() Py_None
#endif /* SWIG_NEED_VARLINK */
#ifdef NEED_SWIG_PTR
/*****************************************************************************
 * $Header$
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strncpy(temp_type,tp->name,255);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#else
#define SWIG_RegisterMapping(a,b,c)
#endif // NEED_SWIG_PTR
#define SWIG_init    initwin32pipe

#define SWIG_name    "win32pipe"

  /* Used to validate access modes in win32pipe.win32pipe() */
#include "fcntl.h"


static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                            
        if (!PyTuple_Check(target)) {   
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}

#include "PyWinTypes.h"
#ifdef NEED_PYWINOBJECTS_H
#include "PyWinObjects.h"
#endif
#include "tchar.h"
typedef BOOL  BOOLAPI;
typedef DWORD  DWORDAPI;

#define PyHANDLE HANDLE // Use a #define so we can undef it later if we need the true defn.
//typedef HANDLE PyHKEY;

#define CHECK_PFN(fname)if (pfn##fname==NULL) return PyErr_Format(PyExc_NotImplementedError,"%s is not available on this platform", #fname);
typedef	BOOL (WINAPI *GetNamedPipeClientProcessIdfunc)(HANDLE, PULONG);
static GetNamedPipeClientProcessIdfunc pfnGetNamedPipeClientProcessId = NULL;
static GetNamedPipeClientProcessIdfunc pfnGetNamedPipeServerProcessId = NULL;
static GetNamedPipeClientProcessIdfunc pfnGetNamedPipeClientSessionId = NULL;
static GetNamedPipeClientProcessIdfunc pfnGetNamedPipeServerSessionId = NULL;

#if (PY_VERSION_HEX < 0x03000000)
extern PyObject *PyPopen(PyObject *self, PyObject  *args);
extern PyObject *PyPopen2(PyObject *self, PyObject  *args);
extern PyObject *PyPopen3(PyObject *self, PyObject  *args);
extern PyObject *PyPopen4(PyObject *self, PyObject  *args);
#else
PyObject *PyPopen(PyObject *self, PyObject  *args) {PyErr_SetString(PyExc_NotImplementedError, "not available in py3k"); return NULL;};
PyObject *PyPopen2(PyObject *self, PyObject  *args) {PyErr_SetString(PyExc_NotImplementedError, "not available in py3k"); return NULL;};
PyObject *PyPopen3(PyObject *self, PyObject  *args) {PyErr_SetString(PyExc_NotImplementedError, "not available in py3k"); return NULL;};
PyObject *PyPopen4(PyObject *self, PyObject  *args) {PyErr_SetString(PyExc_NotImplementedError, "not available in py3k"); return NULL;};
#endif // PY_VERSION_HEX


// @pyswig (int, int, int/None, int/None, <o PyUnicode>|GetNamedPipeHandleState|Determines the state of the named pipe.
PyObject *MyGetNamedPipeHandleState(PyObject *self, PyObject *args)
{
	HANDLE hNamedPipe;
	PyObject *obhNamedPipe;
	unsigned long State;
	unsigned long CurInstances;
	unsigned long MaxCollectionCount;
	unsigned long CollectDataTimeout;
	unsigned long *pMaxCollectionCount;
	unsigned long *pCollectDataTimeout;
	PyObject *obMaxCollectionCount;
	PyObject *obCollectDataTimeout;

	BOOL getCollectData = FALSE;
	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	// @pyparm int|bGetCollectionData|0|Determines of the collection data should be returned.  If not, None is returned in their place.

	if (!PyArg_ParseTuple(args, "O|i:GetNamedPipeHandleState", &obhNamedPipe, &getCollectData))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
	TCHAR buf[512];
	if (getCollectData) {
		pMaxCollectionCount = &MaxCollectionCount;
		pCollectDataTimeout = &CollectDataTimeout;
	} else
		pMaxCollectionCount = pCollectDataTimeout = NULL;

	if (!GetNamedPipeHandleState(hNamedPipe, &State, &CurInstances, pMaxCollectionCount, pCollectDataTimeout, buf, 512))
		return PyWin_SetAPIError("GetNamedPipeHandleState");
	PyObject *obName = PyWinObject_FromTCHAR(buf);
	if (getCollectData) {
		obMaxCollectionCount = PyInt_FromLong(MaxCollectionCount);
		obCollectDataTimeout = PyInt_FromLong(CollectDataTimeout);
	} else {
		obMaxCollectionCount = Py_None; Py_INCREF(Py_None);
		obCollectDataTimeout = Py_None; Py_INCREF(Py_None);
	}
	PyObject *rc = Py_BuildValue("iiOOO", State, CurInstances, obMaxCollectionCount, obCollectDataTimeout, obName);
	Py_DECREF(obMaxCollectionCount);
	Py_DECREF(obCollectDataTimeout);
	Py_DECREF(obName);
	return rc;
}

// @pyswig |SetNamedPipeHandleState|Sets the state of the named pipe.
PyObject *MySetNamedPipeHandleState(PyObject *self, PyObject *args)
{
	HANDLE hNamedPipe;
	unsigned long Mode;
	unsigned long MaxCollectionCount;
	unsigned long CollectDataTimeout;
    unsigned long *pMaxCollectionCount = NULL;
    unsigned long *pCollectDataTimeout = NULL;
    unsigned long *pMode = NULL;
	PyObject *obhNamedPipe;
    PyObject *obMode, *obMaxCollectionCount, *obCollectDataTimeout;

	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	// @pyparm int/None|Mode||The pipe read mode.
	// @pyparm int/None|MaxCollectionCount||Maximum bytes collected before transmission to the server.
	// @pyparm int/None|CollectDataTimeout||Maximum time to wait, in milliseconds, before transmission to server.

	if (!PyArg_ParseTuple(args, "OOOO:SetNamedPipeHandleState", 
			      &obhNamedPipe, &obMode, 
			      &obMaxCollectionCount, &obCollectDataTimeout))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
    if (obMode!=Py_None) {
        if (!PyInt_Check(obMode))
            return PyErr_Format(PyExc_TypeError, "mode param must be None or an integer (got %s)", obMode->ob_type->tp_name);
        Mode = PyInt_AsLong(obMode);
        pMode = &Mode;
    }
    if (obMaxCollectionCount!=Py_None) {
        if (!PyInt_Check(obMaxCollectionCount))
            return PyErr_Format(PyExc_TypeError, "maxCollectionCount param must be None or an integer (got %s)", obMaxCollectionCount->ob_type->tp_name);
        MaxCollectionCount = PyInt_AsLong(obMaxCollectionCount);
        pMaxCollectionCount = &MaxCollectionCount;
    }
    if (obCollectDataTimeout!=Py_None) {
        if (!PyInt_Check(obCollectDataTimeout))
            return PyErr_Format(PyExc_TypeError, "collectDataTimeout param must be None or an integer (got %s)", obCollectDataTimeout->ob_type->tp_name);
        CollectDataTimeout = PyInt_AsLong(obCollectDataTimeout);
        pCollectDataTimeout = &CollectDataTimeout;
    }

	if (!SetNamedPipeHandleState(hNamedPipe, pMode, pMaxCollectionCount,
				     pCollectDataTimeout)) 
		return PyWin_SetAPIError("SetNamedPipeHandleState");
	Py_INCREF(Py_None);
	return Py_None;
}

// @pyswig int|ConnectNamedPipe|Connects to a named pipe
// @comm The result is zero if the function succeeds.  If the function fails,
// GetLastError() is called, and if the result is ERROR_IO_PENDING or ERROR_PIPE_CONNECTED
// (common when passing an overlapped object), this value is returned.  All
// other error values raise a win32 exception (from which the error code
// can be extracted)
PyObject *MyConnectNamedPipe(PyObject *self, PyObject *args)
{
	HANDLE hNamedPipe;
	PyObject *obhNamedPipe;
	OVERLAPPED *pOverlapped;
	PyObject *obOverlapped = NULL;
	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	// @pyparm <o PyOVERLAPPED>|overlapped|None|An overlapped object to use, else None
	if (!PyArg_ParseTuple(args, "O|O:ConnectNamedPipe", &obhNamedPipe, &obOverlapped))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
	if (obOverlapped==NULL)
		pOverlapped = NULL;
	else {
		if (!PyWinObject_AsOVERLAPPED(obOverlapped, &pOverlapped))
			return NULL;
	}
	BOOL ok;
	Py_BEGIN_ALLOW_THREADS
	ok = ConnectNamedPipe(hNamedPipe, pOverlapped);
	Py_END_ALLOW_THREADS
	DWORD rc = ok ? 0 : GetLastError();
	// These error conditions are documented as "acceptable" - ie,
	// the function has still worked.
	if (!ok && rc != ERROR_IO_PENDING && rc != ERROR_PIPE_CONNECTED)
		return PyWin_SetAPIError("ConnectNamedPipe");
	return PyInt_FromLong(rc);
}

// @pyswig string/buffer|TransactNamedPipe|Combines the functions that write a
// message to and read a message from the specified named pipe into a single
// network operation.
// @comm This function is modelled on <om win32file.ReadFile> - for overlapped
// operations you are expected to provide a buffer which will be filled
// asynchronously.
PyObject *MyTransactNamedPipe(PyObject *self, PyObject *args)
{
	PyObject *obHandle, *obWriteData, *obReadData, *obOverlapped = Py_None;
	void *writeData;
	DWORD cbWriteData;
	void *readData;
	DWORD cbReadData;
	HANDLE handle;
	OVERLAPPED *pOverlapped = NULL;
	if (!PyArg_ParseTuple(args, "OOO|O:TransactNamedPipe", 
		&obHandle,	// @pyparm <o PyUNICODE>|pipeName||The name of the pipe.
		&obWriteData,   // @pyparm string/buffer|writeData||The data to write to the pipe.
		// @pyparm <o PyOVERLAPPEDReadBuffer>/int|buffer/bufSize||Size of the buffer to create for the result,
		// or a buffer to fill with the result. If a buffer object and overlapped is passed, the result is
		// the buffer itself.  If a buffer but no overlapped is passed, the result is a new string object,
		// built from the buffer, but with a length that reflects the data actually read.
		&obReadData,
		&obOverlapped))		// @pyparm <o PyOVERLAPPED>|overlapped|None|An overlapped structure or None
		return NULL;

	if (!PyWinObject_AsHANDLE(obHandle, &handle))
		return NULL;

	if (!PyWinObject_AsReadBuffer(obWriteData, &writeData, &cbWriteData, FALSE))
		return NULL;

	if (obOverlapped!=Py_None && !PyWinObject_AsOVERLAPPED(obOverlapped, &pOverlapped))
		return NULL;

	BOOL bIsNewString=FALSE;
	PyObject *obRet = NULL;
	// process the tricky read buffer.
	cbReadData = PyInt_AsLong(obReadData);
	if ((cbReadData!=(DWORD)-1) || !PyErr_Occurred()){
		if (pOverlapped){	// guaranteed to be NULL on CE
			obRet = PyBuffer_New(cbReadData);
			if (obRet==NULL)
				return NULL;
			// This shouldn't fail for buffer just created, but new buffer interface is screwy ...
			DWORD newbufsize;		// maybe also check new buffer size matched requested size ?
			if (!PyWinObject_AsReadBuffer(obRet, &readData, &newbufsize))
				return NULL;
		} else {
			obRet=PyString_FromStringAndSize(NULL, cbReadData);
			if (obRet==NULL)
				return NULL;
			readData=PyString_AS_STRING(obRet);
			bIsNewString=TRUE;
		}
	} else {
		PyErr_Clear();
		if (!PyWinObject_AsWriteBuffer(obReadData, &readData, &cbReadData,FALSE)){
			PyErr_SetString(PyExc_TypeError, "Third param must be an integer or writeable buffer object");
			return NULL;
			}
		// If they didn't pass an overlapped, then we can't return the
		// original buffer as they have no way to know how many bytes
		// were read - so leave obRet NULL and the ret will be a new
		// string object, built from buffer, but the correct length.
		if (pOverlapped){
			obRet = obReadData;
			Py_INCREF(obRet);
		}
	}
	BOOL ok;
	DWORD numRead = 0;
	Py_BEGIN_ALLOW_THREADS
	ok = TransactNamedPipe(handle, writeData, cbWriteData, readData, cbReadData, &numRead, pOverlapped);
	Py_END_ALLOW_THREADS
	DWORD err = 0;
	if (!ok) {
		err = GetLastError();
		if (err!=ERROR_MORE_DATA && err != ERROR_IO_PENDING) {
			Py_XDECREF(obRet);
			return PyWin_SetAPIError("TransactNamedPipe", err);
		}
	}
	if (obRet==NULL)
		obRet=PyString_FromStringAndSize((char *)readData, numRead);
	else if (bIsNewString && (numRead < cbReadData))
		_PyString_Resize(&obRet, numRead);
	if (obRet==NULL)
		return NULL;
	return Py_BuildValue("iN", err, obRet);
}

// @pyswig string|CallNamedPipe|Opens and performs a transaction on a named pipe.
PyObject *MyCallNamedPipe(PyObject *self, PyObject *args)
{
	PyObject *obPipeName, *obdata;
	void *data;
	DWORD dataSize;
	DWORD timeOut;
	DWORD readBufSize;
	TCHAR *szPipeName;
	if (!PyArg_ParseTuple(args, "OOil:CallNamedPipe", 
		&obPipeName,	// @pyparm <o PyUNICODE>|pipeName||The name of the pipe.
		&obdata,		// @pyparm string|data||The data to write.
		&readBufSize,	// @pyparm int|bufSize||The size of the result buffer to allocate for the read.
		&timeOut))		// @pyparm int|timeOut||Specifies the number of milliseconds to wait for the named pipe to be available. In addition to numeric values, the following special values can be specified.
		// @flagh Value|Meaning 
		// @flag win32pipe.NMPWAIT_NOWAIT|Does not wait for the named pipe. If the named pipe is not available, the function returns an error. 
		// @flag win32pipe.NMPWAIT_WAIT_FOREVER|Waits indefinitely. 
		// @flag win32pipe.NMPWAIT_USE_DEFAULT_WAIT|Uses the default time-out specified in a call to the CreateNamedPipe function. 
		return NULL;
	if (!PyWinObject_AsReadBuffer(obdata, &data, &dataSize, FALSE))
		return NULL;
	if (!PyWinObject_AsTCHAR(obPipeName, &szPipeName))
		return NULL;
	void *readBuf = malloc(readBufSize);
	if (!readBuf){
		PyWinObject_FreeTCHAR(szPipeName);
		return PyErr_NoMemory();
		}
	DWORD numRead = 0;
	BOOL ok;
	Py_BEGIN_ALLOW_THREADS
	ok = CallNamedPipe(szPipeName, data, dataSize, readBuf, readBufSize, &numRead, timeOut);
	Py_END_ALLOW_THREADS
	if (!ok) {
		PyWinObject_FreeTCHAR(szPipeName);
		free(readBuf);
		return PyWin_SetAPIError("CallNamedPipe");
	}
	PyObject *rc = PyString_FromStringAndSize( (char *)readBuf, numRead);
	PyWinObject_FreeTCHAR(szPipeName);
	free(readBuf);
	return rc;
}

// @pyswig (<o PyHANDLE>, <o PyHANDLE>)|CreatePipe|Creates an anonymous pipe, and returns handles to the read and write ends of the pipe
PyObject *MyCreatePipe(
		       SECURITY_ATTRIBUTES *INPUT, // @pyparm <o PySECURITY_ATTRIBUTES>|sa||
		       DWORD nSize // @pyparm int|nSize||
		       )
{
  HANDLE hReadPipe;		// variable for read handle 
  HANDLE hWritePipe;		// variable for write handle 
  BOOL   ok;			// did CreatePipe work?

  ok = CreatePipe(&hReadPipe, &hWritePipe, INPUT, nSize);
  if (!ok)
    return PyWin_SetAPIError("CreatePipe");

  PyObject *read_obj = PyWinObject_FromHANDLE(hReadPipe);
  PyObject *write_obj = PyWinObject_FromHANDLE(hWritePipe);
  PyObject *result = Py_BuildValue("OO", read_obj, write_obj);
  Py_DECREF(read_obj);
  Py_DECREF(write_obj);
  return result;
}

// @pyswig (int, int)|FdCreatePipe|As CreatePipe but returns file descriptors
PyObject *FdCreatePipe(
	SECURITY_ATTRIBUTES *INPUT, // @pyparm <o PySECURITY_ATTRIBUTES>|sa||Specifies security and inheritance for the pipe
	DWORD nSize,				// @pyparm int|nSize||Buffer size for pipe.  Use 0 for default size.
	int mode)					// @pyparm int|mode||O_TEXT or O_BINARY
{
  HANDLE hReadPipe;		// variable for read handle 
  HANDLE hWritePipe;		// variable for write handle 
  BOOL   ok;			// did CreatePipe work?
  if (mode != _O_TEXT && mode != _O_BINARY)
    {
      PyErr_SetString(PyExc_ValueError, "mode must be O_TEXT or O_BINARY");
      return NULL;
    }

  ok = CreatePipe(&hReadPipe, &hWritePipe, INPUT, nSize);
  if (!ok)
    return PyWin_SetAPIError("CreatePipe");

  int read_fd = _open_osfhandle ((INT_PTR)hReadPipe, mode);
  int write_fd = _open_osfhandle ((INT_PTR)hWritePipe, mode);
  PyObject *result = Py_BuildValue("ii", read_fd, write_fd);
  return result;
}



// @pyswig (string, int, int)|PeekNamedPipe|Copies data from a named or anonymous pipe into a buffer without removing it from the pipe. It also returns information about data in the pipe.
PyObject *MyPeekNamedPipe(PyObject *self, PyObject *args)
{
	HANDLE hNamedPipe;
	PyObject *obhNamedPipe;
	unsigned long bytesRead, totalAvail, bytesLeft;
	int size;

	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	// @pyparm int|size||The size of the buffer.

	if (!PyArg_ParseTuple(args, "Oi:PeekNamedPipe", &obhNamedPipe, &size))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
	void *buf = malloc(size);
	if (buf==NULL) {
		PyErr_NoMemory();
		return NULL;
	}
	PyObject *rc = NULL;
	if (PeekNamedPipe(hNamedPipe, buf, size, &bytesRead, &totalAvail, &bytesLeft)) {
		rc = Py_BuildValue("Nii", 
			PyString_FromStringAndSize((char *)buf, bytesRead),
			totalAvail, bytesLeft);
	} else
		PyWin_SetAPIError("PeekNamedPipe");
	free(buf);
	return rc;
}

// @pyswig int|GetNamedPipeClientProcessId|Returns the process id of client that is connected to a named pipe
// @comm Requires Vista or later
PyObject *MyGetNamedPipeClientProcessId(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetNamedPipeClientProcessId);
	HANDLE hNamedPipe;
	DWORD pid;
	PyObject *obhNamedPipe;
	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	if (!PyArg_ParseTuple(args, "O:GetNamedPipeClientProcessId", &obhNamedPipe))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
	if (!(*pfnGetNamedPipeClientProcessId)(hNamedPipe, &pid))
		return PyWin_SetAPIError("GetNamedPipeClientProcessId");
	return PyLong_FromUnsignedLong(pid);
}

// @pyswig int|GetNamedPipeServerProcessId|Returns pid of server process that created a named pipe
// @comm Requires Vista or later
PyObject *MyGetNamedPipeServerProcessId(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetNamedPipeServerProcessId);
	HANDLE hNamedPipe;
	DWORD pid;
	PyObject *obhNamedPipe;
	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	if (!PyArg_ParseTuple(args, "O:GetNamedPipeServerProcessId", &obhNamedPipe))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
	if (!(*pfnGetNamedPipeServerProcessId)(hNamedPipe, &pid))
		return PyWin_SetAPIError("GetNamedPipeServerProcessId");
	return PyLong_FromUnsignedLong(pid);
}

// @pyswig int|GetNamedPipeClientSessionId|Returns the session id of client that is connected to a named pipe
// @comm Requires Vista or later
PyObject *MyGetNamedPipeClientSessionId(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetNamedPipeClientSessionId);
	HANDLE hNamedPipe;
	DWORD pid;
	PyObject *obhNamedPipe;
	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	if (!PyArg_ParseTuple(args, "O:GetNamedPipeClientSessionId", &obhNamedPipe))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
	if (!(*pfnGetNamedPipeClientSessionId)(hNamedPipe, &pid))
		return PyWin_SetAPIError("GetNamedPipeClientSessionId");
	return PyLong_FromUnsignedLong(pid);
}

// @pyswig int|GetNamedPipeServerSessionId|Returns session id of server process that created a named pipe
// @comm Requires Vista or later
PyObject *MyGetNamedPipeServerSessionId(PyObject *self, PyObject *args)
{
	CHECK_PFN(GetNamedPipeServerSessionId);
	HANDLE hNamedPipe;
	DWORD pid;
	PyObject *obhNamedPipe;
	// @pyparm <o PyHANDLE>|hPipe||The handle to the pipe.
	if (!PyArg_ParseTuple(args, "O:GetNamedPipeServerSessionId", &obhNamedPipe))
		return NULL;
	if (!PyWinObject_AsHANDLE(obhNamedPipe, &hNamedPipe))
		return NULL;
	if (!(*pfnGetNamedPipeServerSessionId)(hNamedPipe, &pid))
		return PyWin_SetAPIError("GetNamedPipeServerSessionId");
	return PyLong_FromUnsignedLong(pid);
}
static PyObject *_wrap_CreatePipe(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    SECURITY_ATTRIBUTES * _arg0;
    DWORD  _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OO:CreatePipe",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (PyObject *)MyCreatePipe(_arg0,_arg1);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
    return _resultobj;
}

static PyObject *_wrap_FdCreatePipe(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyObject * _result;
    SECURITY_ATTRIBUTES * _arg0;
    DWORD  _arg1;
    int  _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OOi:FdCreatePipe",&_obj0,&_obj1,&_arg2)) 
        return NULL;
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj0, &_arg0))
		return NULL;
}
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj1);
		if (tmpLong == NULL)
			return NULL;
		_arg1 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg1 = PyLong_AsUnsignedLongMask(_obj1);
	#endif
	if (_arg1==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
    _result = (PyObject *)FdCreatePipe(_arg0,_arg1,_arg2);
{
	if (_result==NULL) return NULL; // get out now!
	_resultobj = _result;
}
    return _resultobj;
}

static PyObject *_wrap_CreateNamedPipe(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    TCHAR * _arg0;
    unsigned long  _arg1;
    unsigned long  _arg2;
    unsigned long  _arg3;
    unsigned long  _arg4;
    unsigned long  _arg5;
    unsigned long  _arg6;
    SECURITY_ATTRIBUTES * _arg7;
    PyObject * _obj0 = 0;
    PyObject * _obj7 = 0;

    self = self;
{
	_arg0 = NULL;
}
    if(!PyArg_ParseTuple(args,"OllllllO:CreateNamedPipe",&_obj0,&_arg1,&_arg2,&_arg3,&_arg4,&_arg5,&_arg6,&_obj7)) 
        return NULL;
{
	if (!PyWinObject_AsTCHAR(_obj0, &_arg0, FALSE))
		return NULL;
}
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj7, &_arg7))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )CreateNamedPipe(_arg0,_arg1,_arg2,_arg3,_arg4,_arg5,_arg6,_arg7);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	PyWinObject_FreeTCHAR(_arg0);
}

           return PyWin_SetAPIError("CreateNamedPipe");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	PyWinObject_FreeTCHAR(_arg0);
}
    return _resultobj;
}

static PyObject *_wrap_DisconnectNamedPipe(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"O:DisconnectNamedPipe",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )DisconnectNamedPipe(_arg0);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("DisconnectNamedPipe");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_GetOverlappedResult(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    PyHANDLE  _arg0;
    OVERLAPPED * _arg1;
    unsigned long * _arg2;
    unsigned long  temp;
    BOOL  _arg3;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
  _arg2 = &temp;
}
    if(!PyArg_ParseTuple(args,"OOi:GetOverlappedResult",&_obj0,&_obj1,&_arg3)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsOVERLAPPED(_obj1, &_arg1, TRUE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )GetOverlappedResult(_arg0,_arg1,_arg2,_arg3);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("GetOverlappedResult");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg2));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
    return _resultobj;
}

static PyObject *_wrap_WaitNamedPipe(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    TCHAR * _arg0;
    unsigned long  _arg1;
    PyObject * _obj0 = 0;

    self = self;
{
	_arg0 = NULL;
}
    if(!PyArg_ParseTuple(args,"Ol:WaitNamedPipe",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyWinObject_AsTCHAR(_obj0, &_arg0, FALSE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )WaitNamedPipe(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           {
	PyWinObject_FreeTCHAR(_arg0);
}

           return PyWin_SetAPIError("WaitNamedPipe");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
	PyWinObject_FreeTCHAR(_arg0);
}
    return _resultobj;
}

static PyObject *_wrap_GetNamedPipeInfo(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    DWORD * _arg1;
    unsigned long  temp;
    DWORD * _arg2;
    unsigned long  temp0;
    DWORD * _arg3;
    unsigned long  temp1;
    DWORD * _arg4;
    unsigned long  temp2;
    PyObject * _obj0 = 0;

    self = self;
{
  _arg1 = &temp;
}
{
  _arg2 = &temp0;
}
{
  _arg3 = &temp1;
}
{
  _arg4 = &temp2;
}
    if(!PyArg_ParseTuple(args,"O:GetNamedPipeInfo",&_obj0)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )GetNamedPipeInfo(_arg0,_arg1,_arg2,_arg3,_arg4);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("GetNamedPipeInfo");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg1));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg2));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg3));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
{
    PyObject *o;
    o = PyInt_FromLong((long) (*_arg4));
    if (!_resultobj) {
      _resultobj = o;
    } else if (_resultobj == Py_None) {
      Py_DECREF(Py_None);
      _resultobj = o;
    } else {
      if (!PyList_Check(_resultobj)) {
	PyObject *o2 = _resultobj;
	_resultobj = PyList_New(0);
	PyList_Append(_resultobj,o2);
	Py_XDECREF(o2);
      }
      PyList_Append(_resultobj,o);
      Py_XDECREF(o);
    }
}
    return _resultobj;
}

static PyMethodDef win32pipeMethods[] = {
	 { "GetNamedPipeServerSessionId", MyGetNamedPipeServerSessionId, 1 },
	 { "GetNamedPipeClientSessionId", MyGetNamedPipeClientSessionId, 1 },
	 { "GetNamedPipeServerProcessId", MyGetNamedPipeServerProcessId, 1 },
	 { "GetNamedPipeClientProcessId", MyGetNamedPipeClientProcessId, 1 },
	 { "PeekNamedPipe", MyPeekNamedPipe, 1 },
	 { "GetNamedPipeInfo", _wrap_GetNamedPipeInfo, 1 },
	 { "WaitNamedPipe", _wrap_WaitNamedPipe, 1 },
	 { "GetOverlappedResult", _wrap_GetOverlappedResult, 1 },
	 { "DisconnectNamedPipe", _wrap_DisconnectNamedPipe, 1 },
	 { "CreateNamedPipe", _wrap_CreateNamedPipe, 1 },
	 { "FdCreatePipe", _wrap_FdCreatePipe, 1 },
	 { "CreatePipe", _wrap_CreatePipe, 1 },
	 { "CallNamedPipe", MyCallNamedPipe, 1 },
	 { "TransactNamedPipe", MyTransactNamedPipe, 1 },
	 { "ConnectNamedPipe", MyConnectNamedPipe, 1 },
	 { "SetNamedPipeHandleState", MySetNamedPipeHandleState, 1 },
	 { "GetNamedPipeHandleState", MyGetNamedPipeHandleState, 1 },
	 { "popen4", PyPopen4, 1 },
	 { "popen3", PyPopen3, 1 },
	 { "popen2", PyPopen2, 1 },
	 { "popen", PyPopen, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
#if (PY_VERSION_HEX < 0x03000000)
#define MODINIT_ERROR_RETURN
SWIGEXPORT(void,initwin32pipe)() {
#else
#define MODINIT_ERROR_RETURN NULL
SWIGEXPORT(PyObject*,  PyInit_win32pipe)(void) {
#endif
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
#if (PY_VERSION_HEX < 0x03000000)
	 m = Py_InitModule("win32pipe", win32pipeMethods);
	 d = PyModule_GetDict(m);
#else
  static PyModuleDef win32pipe_def = {
    PyModuleDef_HEAD_INIT,
      "win32pipe",
      "",
      -1,
      win32pipeMethods,
      };
  m = PyModule_Create(&win32pipe_def);
  if (!m)
    return NULL;
  d = PyModule_GetDict(m);
  if (!d)
    return NULL;
#endif

#ifndef SWIG_PYTHONCOM
/* This code only valid if non COM SWIG builds */
#ifndef PYCOM_EXPORT
	 PyDict_SetItemString(d,"UNICODE", PyInt_FromLong(
#ifdef UNICODE
	1
#else
	0
#endif
	));
#endif
  PyWinGlobals_Ensure();
  PyDict_SetItemString(d, "error", PyWinExc_ApiError);
#endif SWIG_PYTHONCOM

	// All errors raised by this module are of this type.
	PyDict_SetItemString(d, "error", PyWinExc_ApiError);

	HMODULE hmod=GetModuleHandle(_T("Kernel32.dll"));
	if (!hmod)
		hmod=LoadLibrary(_T("Kernel32.dll"));
	if (hmod){
		pfnGetNamedPipeClientProcessId = (GetNamedPipeClientProcessIdfunc)GetProcAddress(hmod, "GetNamedPipeClientProcessId");
		pfnGetNamedPipeServerProcessId = (GetNamedPipeClientProcessIdfunc)GetProcAddress(hmod, "GetNamedPipeServerProcessId");
		pfnGetNamedPipeClientSessionId = (GetNamedPipeClientProcessIdfunc)GetProcAddress(hmod, "GetNamedPipeClientSessionId");
		pfnGetNamedPipeServerSessionId = (GetNamedPipeClientProcessIdfunc)GetProcAddress(hmod, "GetNamedPipeServerSessionId");
		}
	 PyDict_SetItemString(d,"PIPE_ACCESS_DUPLEX", PyInt_FromLong((long) PIPE_ACCESS_DUPLEX));
	 PyDict_SetItemString(d,"PIPE_ACCESS_INBOUND", PyInt_FromLong((long) PIPE_ACCESS_INBOUND));
	 PyDict_SetItemString(d,"PIPE_ACCESS_OUTBOUND", PyInt_FromLong((long) PIPE_ACCESS_OUTBOUND));
	 PyDict_SetItemString(d,"PIPE_TYPE_BYTE", PyInt_FromLong((long) PIPE_TYPE_BYTE));
	 PyDict_SetItemString(d,"PIPE_TYPE_MESSAGE", PyInt_FromLong((long) PIPE_TYPE_MESSAGE));
	 PyDict_SetItemString(d,"PIPE_READMODE_BYTE", PyInt_FromLong((long) PIPE_READMODE_BYTE));
	 PyDict_SetItemString(d,"PIPE_READMODE_MESSAGE", PyInt_FromLong((long) PIPE_READMODE_MESSAGE));
	 PyDict_SetItemString(d,"PIPE_WAIT", PyInt_FromLong((long) PIPE_WAIT));
	 PyDict_SetItemString(d,"PIPE_NOWAIT", PyInt_FromLong((long) PIPE_NOWAIT));
	 PyDict_SetItemString(d,"NMPWAIT_NOWAIT", PyInt_FromLong((long) NMPWAIT_NOWAIT));
	 PyDict_SetItemString(d,"NMPWAIT_WAIT_FOREVER", PyInt_FromLong((long) NMPWAIT_WAIT_FOREVER));
	 PyDict_SetItemString(d,"NMPWAIT_USE_DEFAULT_WAIT", PyInt_FromLong((long) NMPWAIT_USE_DEFAULT_WAIT));
	 PyDict_SetItemString(d,"PIPE_UNLIMITED_INSTANCES", PyInt_FromLong((long) PIPE_UNLIMITED_INSTANCES));
#if (PY_VERSION_HEX > 0x03000000)
	return m;
#endif
}
