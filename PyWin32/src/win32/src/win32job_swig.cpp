/*
 * FILE : C:\Users\Administrator\Documents\GitHub\test_project\PyWin32\src\win32\src\win32job_swig.cpp
 * 
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 * 
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 * 
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : PYTHON */

#define SWIGPYTHON
#include <string.h>
#include <stdlib.h>
/***********************************************************************
 * $Header$
 * swig_lib/python/python.cfg
 *
 * This file contains coded needed to add variable linking to the
 * Python interpreter.   C variables are added as a new kind of Python
 * datatype.
 *
 * Also contains supporting code for building python under Windows
 * and things like that.
 *
 * $Log$
 * Revision 1.1  2000/03/14 23:34:06  mhammond
 * Needed to modify a standard Swig file to avoid the 'extern "C"' around Python.h (which gets upset when it tries to include whcar.h as part of the new Unicode patches)
 *
 ************************************************************************/

#include "Python.h"

/* Definitions for Windows/Unix exporting */
#if defined(__WIN32__)
#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

#ifdef NEED_SWIG_VARLINK

typedef struct {
  char  *name;
  PyObject *(*get_attr)(void);
  int (*set_attr)(PyObject *);
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar **vars;
  int      nvars;
  int      maxvars;
} swig_varlinkobject;

/* ----------------------------------------------------------------------
   swig_varlink_repr()

   Function for python repr method
   ---------------------------------------------------------------------- */

static PyObject *
swig_varlink_repr(swig_varlinkobject *v)
{
  v = v;
  return PyString_FromString("<Global variables>");
}

/* ---------------------------------------------------------------------
   swig_varlink_print()

   Print out all of the global variable names
   --------------------------------------------------------------------- */

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags)
{

  int i = 0;
  flags = flags;
  fprintf(fp,"Global variables { ");
  while (v->vars[i]) {
    fprintf(fp,"%s", v->vars[i]->name);
    i++;
    if (v->vars[i]) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

/* --------------------------------------------------------------------
   swig_varlink_getattr
 
   This function gets the value of a variable and returns it as a
   PyObject.   In our case, we'll be looking at the datatype and
   converting into a number or string
   -------------------------------------------------------------------- */

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n)
{
  int i = 0;
  char temp[128];

  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->get_attr)();
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return NULL;
}

/* -------------------------------------------------------------------
   swig_varlink_setattr()

   This function sets the value of a variable.
   ------------------------------------------------------------------- */

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p)
{
  char temp[128];
  int i = 0;
  while (v->vars[i]) {
    if (strcmp(v->vars[i]->name,n) == 0) {
      return (*v->vars[i]->set_attr)(p);
    }
    i++;
  }
  sprintf(temp,"C global variable %s not found.", n);
  PyErr_SetString(PyExc_NameError,temp);
  return 1;
}

statichere PyTypeObject varlinktype = {
/*  PyObject_HEAD_INIT(&PyType_Type)  Note : This doesn't work on some machines */
  PyObject_HEAD_INIT(0)              
  0,
  "varlink",                          /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */

SWIGSTATIC PyObject *
SWIG_newvarlink(void)
{
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  /*  _Py_NewReference(result);  Does not seem to be necessary */
  result->nvars = 0;
  result->maxvars = 64;
  result->vars = (swig_globalvar **) malloc(64*sizeof(swig_globalvar *));
  result->vars[0] = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGSTATIC void
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p))
{
  swig_varlinkobject *v;
  v= (swig_varlinkobject *) p;
	
  if (v->nvars >= v->maxvars -1) {
    v->maxvars = 2*v->maxvars;
    v->vars = (swig_globalvar **) realloc(v->vars,v->maxvars*sizeof(swig_globalvar *));
    if (v->vars == NULL) {
      fprintf(stderr,"SWIG : Fatal error in initializing Python module.\n");
      exit(1);
    }
  }
  v->vars[v->nvars] = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  v->vars[v->nvars]->name = (char *) malloc(strlen(name)+1);
  strcpy(v->vars[v->nvars]->name,name);
  v->vars[v->nvars]->get_attr = get_attr;
  v->vars[v->nvars]->set_attr = set_attr;
  v->nvars++;
  v->vars[v->nvars] = 0;
}

#else
#define SWIG_newvarlink() Py_None
#endif /* SWIG_NEED_VARLINK */
#ifdef NEED_SWIG_PTR
/*****************************************************************************
 * $Header$
 *
 * swigptr.swg
 *
 * This file contains supporting code for the SWIG run-time type checking
 * mechanism.  The following functions are available :
 *
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *));
 *
 *      Registers a new type-mapping with the type-checker.  origtype is the
 *      original datatype and newtype is an equivalent type.  cast is optional
 *      pointer to a function to cast pointer values between types (this
 *      is typically used to cast pointers from derived classes to base classes in C++)
 *      
 * SWIG_MakePtr(char *buffer, void *ptr, char *typestring);
 *     
 *      Makes a pointer string from a pointer and typestring.  The result is returned
 *      in buffer which is assumed to hold enough space for the result.
 *
 * char * SWIG_GetPtr(char *buffer, void **ptr, char *type)
 *
 *      Gets a pointer value from a string.  If there is a type-mismatch, returns
 *      a character string to the received type.  On success, returns NULL.
 *
 *
 * You can remap these functions by making a file called "swigptr.swg" in
 * your the same directory as the interface file you are wrapping.
 *
 * These functions are normally declared static, but this file can be
 * can be used in a multi-module environment by redefining the symbol
 * SWIGSTATIC.
 *****************************************************************************/

#include <stdlib.h>

#ifdef SWIG_GLOBAL
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif


/* SWIG pointer structure */

typedef struct SwigPtrType {
  char               *name;               /* Datatype name                  */
  int                 len;                /* Length (used for optimization) */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigPtrType *next;               /* Linked list pointer            */
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

/* Some variables  */

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
                                       /* This value may be adjusted dynamically */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Starting positions of types            */

/* Pointer table */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];  
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}

/* Register a new datatype with the type-checker */

SWIGSTATIC 
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0,*t1;

  /* Allocate the pointer table if necessary */

  if (!SwigPtrTable) {     
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  /* Grow the table */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc((char *) SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(t->name);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }

  /* Check for existing entry */

  while (t->next) {
    if ((strcmp(t->name,newtype) == 0)) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  
  /* Now place entry (in sorted order) */

  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(t1->name);
  t1->cast = cast;
  t1->next = 0;            
  t->next = t1;           
  SwigPtrSort = 0;
}

/* Make a pointer value string */

SWIGSTATIC 
void SWIG_MakePtr(char *_c, const void *_ptr, char *type) {
  static char _hex[16] =
  {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'a', 'b', 'c', 'd', 'e', 'f'};
  unsigned long _p, _s;
  char _result[20], *_r;    /* Note : a 64-bit hex number = 16 digits */
  _r = _result;
  _p = (unsigned long) _ptr;
  if (_p > 0) {
    while (_p > 0) {
      _s = _p & 0xf;
      *(_r++) = _hex[_s];
      _p = _p >> 4;
    }
    *_r = '_';
    while (_r >= _result)
      *(_c++) = *(_r--);
  } else {
    strcpy (_c, "NULL");
  }
  if (_ptr)
    strcpy (_c, type);
}

/* Define for backwards compatibility */

#define _swig_make_hex   SWIG_MakePtr 

/* Function for getting a pointer value */

SWIGSTATIC 
char *SWIG_GetPtr(char *_c, void **ptr, char *_t)
{
  unsigned long _p;
  char temp_type[256];
  char *name;
  int  i, len;
  SwigPtrType *sp,*tp;
  SwigCacheType *cache;
  int  start, end;
  _p = 0;

  /* Pointer values must start with leading underscore */
  if (*_c == '_') {
      _c++;
      /* Extract hex value from pointer */
      while (*_c) {
	  if ((*_c >= '0') && (*_c <= '9'))
	    _p = (_p << 4) + (*_c - '0');
	  else if ((*_c >= 'a') && (*_c <= 'f'))
	    _p = (_p << 4) + ((*_c - 'a') + 10);
	  else
	    break;
	  _c++;
      }

      if (_t) {
	if (strcmp(_t,_c)) { 
	  if (!SwigPtrSort) {
	    qsort((void *) SwigPtrTable, SwigPtrN, sizeof(SwigPtrType), swigsort); 
	    for (i = 0; i < 256; i++) {
	      SwigStart[i] = SwigPtrN;
	    }
	    for (i = SwigPtrN-1; i >= 0; i--) {
	      SwigStart[(int) (SwigPtrTable[i].name[1])] = i;
	    }
	    for (i = 255; i >= 1; i--) {
	      if (SwigStart[i-1] > SwigStart[i])
		SwigStart[i-1] = SwigStart[i];
	    }
	    SwigPtrSort = 1;
	    for (i = 0; i < SWIG_CACHESIZE; i++)  
	      SwigCache[i].stat = 0;
	  }
	  
	  /* First check cache for matches.  Uses last cache value as starting point */
	  cache = &SwigCache[SwigLastCache];
	  for (i = 0; i < SWIG_CACHESIZE; i++) {
	    if (cache->stat) {
	      if (strcmp(_t,cache->name) == 0) {
		if (strcmp(_c,cache->mapped) == 0) {
		  cache->stat++;
		  *ptr = (void *) _p;
		  if (cache->tp->cast) *ptr = (*(cache->tp->cast))(*ptr);
		  return (char *) 0;
		}
	      }
	    }
	    SwigLastCache = (SwigLastCache+1) & SWIG_CACHEMASK;
	    if (!SwigLastCache) cache = SwigCache;
	    else cache++;
	  }
	  /* We have a type mismatch.  Will have to look through our type
	     mapping table to figure out whether or not we can accept this datatype */

	  start = SwigStart[(int) _t[1]];
	  end = SwigStart[(int) _t[1]+1];
	  sp = &SwigPtrTable[start];
	  while (start < end) {
	    if (swigcmp(_t,sp) == 0) break;
	    sp++;
	    start++;
	  }
	  if (start >= end) sp = 0;
	  /* Try to find a match for this */
	  if (sp) {
	    while (swigcmp(_t,sp) == 0) {
	      name = sp->name;
	      len = sp->len;
	      tp = sp->next;
	      /* Try to find entry for our given datatype */
	      while(tp) {
		if (tp->len >= 255) {
		  return _c;
		}
		strncpy(temp_type,tp->name,255);
		strncat(temp_type,_t+len,255-tp->len);
		if (strcmp(_c,temp_type) == 0) {
		  
		  strcpy(SwigCache[SwigCacheIndex].mapped,_c);
		  strcpy(SwigCache[SwigCacheIndex].name,_t);
		  SwigCache[SwigCacheIndex].stat = 1;
		  SwigCache[SwigCacheIndex].tp = tp;
		  SwigCacheIndex = SwigCacheIndex & SWIG_CACHEMASK;
		  
		  /* Get pointer value */
		  *ptr = (void *) _p;
		  if (tp->cast) *ptr = (*(tp->cast))(*ptr);
		  return (char *) 0;
		}
		tp = tp->next;
	      }
	      sp++;
	      /* Hmmm. Didn't find it this time */
	    }
	  }
	  /* Didn't find any sort of match for this data.  
	     Get the pointer value and return the received type */
	  *ptr = (void *) _p;
	  return _c;
	} else {
	  /* Found a match on the first try.  Return pointer value */
	  *ptr = (void *) _p;
	  return (char *) 0;
	}
      } else {
	/* No type specified.  Good luck */
	*ptr = (void *) _p;
	return (char *) 0;
      }
  } else {
    if (strcmp (_c, "NULL") == 0) {
	*ptr = (void *) 0;
	return (char *) 0;
    }
    *ptr = (void *) 0;	
    return _c;
  }
}

/* Compatibility mode */

#define _swig_get_hex  SWIG_GetPtr

#else
#define SWIG_RegisterMapping(a,b,c)
#endif // NEED_SWIG_PTR
#define SWIG_init    initwin32job

#define SWIG_name    "win32job"

#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x500
#endif

#include "PyWinTypes.h"

#define CHECK_PFN(fname)if (pfn##fname==NULL) return PyErr_Format(PyExc_NotImplementedError,"%s is not available on this platform", #fname);
typedef BOOL (WINAPI *IsProcessInJobfunc)(HANDLE,HANDLE,PBOOL);
static IsProcessInJobfunc pfnIsProcessInJob=NULL;

static PyObject* t_output_helper(PyObject* target, PyObject* o) {
    PyObject*   o2;
    PyObject*   o3;

    if (!target) {                   
        target = o;
    } else if (target == Py_None) {  
        Py_DECREF(Py_None);
        target = o;
    } else {                            
        if (!PyTuple_Check(target)) {   
            o2 = target;
            target = PyTuple_New(1);
            PyTuple_SetItem(target, 0, o2);
        }
        o3 = PyTuple_New(1);            
        PyTuple_SetItem(o3, 0, o);      

        o2 = target;
        target = PySequence_Concat(o2, o3); 
        Py_DECREF(o2);                      
        Py_DECREF(o3);
    }
    return target;
}

#include "PyWinTypes.h"
#ifdef NEED_PYWINOBJECTS_H
#include "PyWinObjects.h"
#endif
#include "tchar.h"
typedef BOOL  BOOLAPI;
typedef DWORD  DWORDAPI;

#define PyHANDLE HANDLE // Use a #define so we can undef it later if we need the true defn.
//typedef HANDLE PyHKEY;

// @pyswig boolean|IsProcessInJob|Determines if the process is running in the specified job.
// @comm Function is only available on WinXP and later
PyObject *PyIsProcessInJob(PyObject *self, PyObject *args)
{
	CHECK_PFN(IsProcessInJob);
	PyObject *obph, *objh;
	HANDLE ph, jh;
	BOOL res;
	if (!PyArg_ParseTuple(args, "OO", 
		&obph,		// @pyparm <o PyHANDLE>|hProcess||Handle to a process
		&objh))		// @pyparm <o PyHANDLE>|hJob||Handle to a job, use None to check if process is part of any job
		return NULL;
	if (!PyWinObject_AsHANDLE(obph, &ph))
		return NULL;
	if (!PyWinObject_AsHANDLE(objh, &jh))
		return NULL;

	if (!(*pfnIsProcessInJob)(ph, jh, &res))
		return PyWin_SetAPIError("IsProcessInJob");
	return PyBool_FromLong(res);
}

PyObject *PyWinObject_FromJOBOBJECT_BASIC_LIMIT_INFORMATION(PJOBOBJECT_BASIC_LIMIT_INFORMATION jbli)
{
	return Py_BuildValue("{s:L,s:L,s:k,s:k,s:k,s:k,s:k,s:k,s:k}",
		"PerProcessUserTimeLimit",jbli->PerProcessUserTimeLimit,
		"PerJobUserTimeLimit",jbli->PerJobUserTimeLimit,
		"LimitFlags",jbli->LimitFlags,
		"MinimumWorkingSetSize",jbli->MinimumWorkingSetSize,
		"MaximumWorkingSetSize",jbli->MaximumWorkingSetSize,
		"ActiveProcessLimit",jbli->ActiveProcessLimit,
		"Affinity",jbli->Affinity,
		"PriorityClass",jbli->PriorityClass,
		"SchedulingClass",jbli->SchedulingClass);
}

PyObject *PyWinObject_FromJOBOBJECT_BASIC_ACCOUNTING_INFORMATION(PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION jbai)
{
	return Py_BuildValue("{s:L,s:L,s:L,s:L,s:k,s:k,s:k,s:k}",
		"TotalUserTime",jbai->TotalUserTime,
		"TotalKernelTime",jbai->TotalKernelTime,
		"ThisPeriodTotalUserTime",jbai->ThisPeriodTotalUserTime,
		"ThisPeriodTotalKernelTime",jbai->ThisPeriodTotalKernelTime,
		"TotalPageFaultCount",jbai->TotalPageFaultCount,
		"TotalProcesses",jbai->TotalProcesses,
		"ActiveProcesses",jbai->ActiveProcesses,
		"TotalTerminatedProcesses",jbai->TotalTerminatedProcesses);
}

// @pyswig dict|QueryInformationJobObject|Retrieves limit and job state information from the job object.
// @rdesc The type of the returned information is dependent on the class requested
PyObject *PyQueryInformationJobObject(PyObject *self, PyObject *args)
{
	PyObject *objh;
	HANDLE jh;
	JOBOBJECTINFOCLASS infoclass;
	if (!PyArg_ParseTuple(args, "Ok",
		&objh,			// @pyparm <o PyHANDLE>|Job||Handle to a job, use None for job that calling process is part of
		&infoclass))	// @pyparm int|JobObjectInfoClass||The type of data required, one of JobObject* values
		return NULL;
	if (!PyWinObject_AsHANDLE(objh, &jh))
		return NULL;
	// @flagh JobObjectInfoClass|Type of information returned
	switch (infoclass){
		// @flag JobObjectBasicAccountingInformation|Returns a dict representing a JOBOBJECT_BASIC_ACCOUNTING_INFORMATION struct
		case JobObjectBasicAccountingInformation:{
			JOBOBJECT_BASIC_ACCOUNTING_INFORMATION info;
			if (!QueryInformationJobObject(jh, infoclass, &info, sizeof(info), NULL))
				return PyWin_SetAPIError("QueryInformationJobObject");
			return PyWinObject_FromJOBOBJECT_BASIC_ACCOUNTING_INFORMATION(&info);
			}
 		// @flag JobObjectBasicAndIoAccountingInformation|Returns a dict representing a JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION struct
		case JobObjectBasicAndIoAccountingInformation:{
			JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION info;
			if (!QueryInformationJobObject(jh, infoclass, &info, sizeof(info), NULL))
				return PyWin_SetAPIError("QueryInformationJobObject");
			return Py_BuildValue("{s:N,s:N}",
				"BasicInfo",PyWinObject_FromJOBOBJECT_BASIC_ACCOUNTING_INFORMATION(&info.BasicInfo), 
				"IoInfo",	PyWinObject_FromIO_COUNTERS(&info.IoInfo));
			}
		// @flag JobObjectBasicLimitInformation|Returns a dict representing a JOBOBJECT_BASIC_LIMIT_INFORMATION struct
		case JobObjectBasicLimitInformation:{
			JOBOBJECT_BASIC_LIMIT_INFORMATION info;
			if (!QueryInformationJobObject(jh, infoclass, &info, sizeof(info), NULL))
				return PyWin_SetAPIError("QueryInformationJobObject");
			return PyWinObject_FromJOBOBJECT_BASIC_LIMIT_INFORMATION(&info);
			}
		// @flag JobObjectExtendedLimitInformation|Returns a dict representing a JOBOBJECT_EXTENDED_LIMIT_INFORMATION struct
		case JobObjectExtendedLimitInformation:{
			JOBOBJECT_EXTENDED_LIMIT_INFORMATION info;
			if (!QueryInformationJobObject(jh, infoclass, &info, sizeof(info), NULL))
				return PyWin_SetAPIError("QueryInformationJobObject");
			return Py_BuildValue("{s:N,s:N,s:N,s:N,s:N,s:N}",
				"BasicLimitInformation",PyWinObject_FromJOBOBJECT_BASIC_LIMIT_INFORMATION(&info.BasicLimitInformation),
				"IoInfo",				PyWinObject_FromIO_COUNTERS(&info.IoInfo),
				"ProcessMemoryLimit",	PyLong_FromUnsignedLongLong(info.ProcessMemoryLimit),
				"JobMemoryLimit",		PyLong_FromUnsignedLongLong(info.JobMemoryLimit),
				"PeakProcessMemoryUsed",PyLong_FromUnsignedLongLong(info.PeakProcessMemoryUsed),
				"PeakJobMemoryUsed",	PyLong_FromUnsignedLongLong(info.PeakJobMemoryUsed));
			}

		// @flag JobObjectEndOfJobTimeInformation|Returns a dict representing a JOBOBJECT_END_OF_JOB_TIME_INFORMATION struct
		case JobObjectEndOfJobTimeInformation:{
			JOBOBJECT_END_OF_JOB_TIME_INFORMATION info;
			if (!QueryInformationJobObject(jh, infoclass, &info, sizeof(info), NULL))
				return PyWin_SetAPIError("QueryInformationJobObject");
			return Py_BuildValue("{s:k}","EndOfJobTimeAction",info.EndOfJobTimeAction);
			}
		// @flag JobObjectBasicUIRestrictions|Returns a dict representing a JOBOBJECT_BASIC_UI_RESTRICTIONS struct
		case JobObjectBasicUIRestrictions:{
			JOBOBJECT_BASIC_UI_RESTRICTIONS info;
			if (!QueryInformationJobObject(jh, infoclass, &info, sizeof(info), NULL))
				return PyWin_SetAPIError("QueryInformationJobObject");
			return Py_BuildValue("{s:k}","UIRestrictionsClass",info.UIRestrictionsClass);
			}
		// @flag JobObjectBasicProcessIdList|Returns a sequence of pids of processes assigned to the job
		case JobObjectBasicProcessIdList:{
			JOBOBJECT_BASIC_PROCESS_ID_LIST *pinfo=NULL;
			DWORD pids_allocated=50, buflen, tuple_index;
			PyObject *ret=NULL;
			while (1){
				if (pinfo)
					free(pinfo);
				buflen=sizeof(DWORD)*2 + sizeof(ULONG_PTR)*pids_allocated;
				pinfo=(JOBOBJECT_BASIC_PROCESS_ID_LIST *)malloc(buflen);
				if (pinfo==NULL)
					return PyErr_Format(PyExc_MemoryError, "Failed to allocate %d bytes", buflen);
				ZeroMemory(pinfo, buflen);
				if (QueryInformationJobObject(jh, infoclass, pinfo, buflen, NULL))
					break;
				if (GetLastError()!=ERROR_MORE_DATA){
					PyWin_SetAPIError("QueryInformationJobObject");
					goto done;;
					}
				pids_allocated=pinfo->NumberOfAssignedProcesses+2;
				}
			ret=PyTuple_New(pinfo->NumberOfAssignedProcesses);
			if (ret==NULL)
				goto done;;
			for (tuple_index=0; tuple_index<pinfo->NumberOfProcessIdsInList; tuple_index++){
				PyObject *tuple_item=PyLong_FromUnsignedLongLong(pinfo->ProcessIdList[tuple_index]);
				if (tuple_item==NULL){
					Py_DECREF(ret);
					ret=NULL;
					break;
					}
				PyTuple_SET_ITEM(ret, tuple_index, tuple_item);
				}
			done:
				free(pinfo);
				return ret;
			}
		// @flag JobObjectJobSetInformation|Returns a dict representing a JOBOBJECT_JOBSET_INFORMATION struct (not documented on MSDN)
		case JobObjectJobSetInformation:{
			JOBOBJECT_JOBSET_INFORMATION info;
			if (!QueryInformationJobObject(jh, infoclass, &info, sizeof(info), NULL))
				return PyWin_SetAPIError("QueryInformationJobObject");
			return Py_BuildValue("{s:k}","MemberLevel",info.MemberLevel);
			}
		// @flag JobObjectSecurityLimitInformation|JOBOBJECT_SECURITY_LIMIT_INFORMATION Not implemented
		// @flag JobObjectAssociateCompletionPortInformation|JOBOBJECT_ASSOCIATE_COMPLETION_PORT Not implemented
		default:
			return PyErr_Format(PyExc_NotImplementedError, "Job information class %d is not supported yet");
	}
}

BOOL PyWinObject_AsJOBOBJECT_END_OF_JOB_TIME_INFORMATION(PyObject *ob, PJOBOBJECT_END_OF_JOB_TIME_INFORMATION jeoj)
{
	static char *keywords[]={"EndOfJobTimeAction",NULL};
	static char *fmt="k:JOBOBJECT_END_OF_JOB_TIME_INFORMATION";
	if (!PyDict_Check(ob)){
		PyErr_SetString(PyExc_TypeError,"JOBOBJECT_END_OF_JOB_TIME_INFORMATION must be a dict");
		return FALSE;
		}
	PyObject *dummyargs=PyTuple_New(0);
	if (dummyargs==NULL)
		return FALSE;
	BOOL bsuccess=PyArg_ParseTupleAndKeywords(dummyargs, ob, fmt, keywords,
		&jeoj->EndOfJobTimeAction);
	Py_DECREF(dummyargs);
	return bsuccess;
}

BOOL PyWinObject_AsJOBOBJECT_BASIC_UI_RESTRICTIONS(PyObject *ob, PJOBOBJECT_BASIC_UI_RESTRICTIONS jbur)
{
	static char *keywords[]={"UIRestrictionsClass",NULL};
	static char *fmt="k:JOBOBJECT_BASIC_UI_RESTRICTIONS";
	if (!PyDict_Check(ob)){
		PyErr_SetString(PyExc_TypeError,"JOBOBJECT_BASIC_UI_RESTRICTIONS must be a dict");
		return FALSE;
		}
	PyObject *dummyargs=PyTuple_New(0);
	if (dummyargs==NULL)
		return FALSE;
	BOOL bsuccess=PyArg_ParseTupleAndKeywords(dummyargs, ob, fmt, keywords,
		&jbur->UIRestrictionsClass);
	Py_DECREF(dummyargs);
	return bsuccess;
}

BOOL PyWinObject_AsIO_COUNTERS(PyObject *ob, PIO_COUNTERS pioc)
{
	static char *keywords[]={"ReadOperationCount","WriteOperationCount","OtherOperationCount",
		"ReadTransferCount","WriteTransferCount","OtherTransferCount",NULL};
	static char *fmt="KKKKKK:IO_COUNTERS";
	if (!PyDict_Check(ob)){
		PyErr_SetString(PyExc_TypeError,"IO_COUNTERS must be a dict");
		return FALSE;
		}
	PyObject *dummyargs=PyTuple_New(0);
	if (dummyargs==NULL)
		return FALSE;
	BOOL bsuccess=PyArg_ParseTupleAndKeywords(dummyargs, ob, fmt, keywords,
		&pioc->ReadOperationCount,
		&pioc->WriteOperationCount,
		&pioc->OtherOperationCount,
		&pioc->ReadTransferCount,
		&pioc->WriteTransferCount,
		&pioc->OtherTransferCount);
	Py_DECREF(dummyargs);
	return bsuccess;
}

BOOL PyWinObject_AsJOBOBJECT_BASIC_LIMIT_INFORMATION(PyObject *ob, PJOBOBJECT_BASIC_LIMIT_INFORMATION jbli)
{
	static char *keywords[]={"PerProcessUserTimeLimit","PerJobUserTimeLimit","LimitFlags",
		"MinimumWorkingSetSize","MaximumWorkingSetSize","ActiveProcessLimit",
		"Affinity","PriorityClass","SchedulingClass",NULL};
	// contains a couple of datatypes that change size for 64-bit
#ifdef _WIN64
	static char *fmt="LLkKKkKkk:JOBOBJECT_BASIC_LIMIT_INFORMATION";
#else
	static char *fmt="LLkkkkkkk:JOBOBJECT_BASIC_LIMIT_INFORMATION";
#endif
	if (!PyDict_Check(ob)){
		PyErr_SetString(PyExc_TypeError,"JOBOBJECT_BASIC_LIMIT_INFORMATION must be a dict");
		return FALSE;
		}
	PyObject *dummyargs=PyTuple_New(0);
	if (dummyargs==NULL)
		return FALSE;
	BOOL bsuccess=PyArg_ParseTupleAndKeywords(dummyargs, ob, fmt, keywords,
		&jbli->PerProcessUserTimeLimit,
		&jbli->PerJobUserTimeLimit,
		&jbli->LimitFlags,
		&jbli->MinimumWorkingSetSize,
		&jbli->MaximumWorkingSetSize,
		&jbli->ActiveProcessLimit,
		&jbli->Affinity,
		&jbli->PriorityClass,
		&jbli->SchedulingClass);
	Py_DECREF(dummyargs);
	return bsuccess;
}

BOOL PyWinObject_AsJOBOBJECT_EXTENDED_LIMIT_INFORMATION(PyObject *ob, PJOBOBJECT_EXTENDED_LIMIT_INFORMATION jeli)
{
	static char *keywords[]={"BasicLimitInformation","IoInfo","ProcessMemoryLimit",
		"JobMemoryLimit","PeakProcessMemoryUsed","PeakJobMemoryUsed",NULL};
#ifdef _WIN64
	static char *fmt="O&O&KKKK:JOBOBJECT_EXTENDED_LIMIT_INFORMATION";
#else
	static char *fmt="O&O&kkkk:JOBOBJECT_EXTENDED_LIMIT_INFORMATION";
#endif
	if (!PyDict_Check(ob)){
		PyErr_SetString(PyExc_TypeError,"JOBOBJECT_EXTENDED_LIMIT_INFORMATION must be a dict");
		return FALSE;
		}
	PyObject *dummyargs=PyTuple_New(0);
	if (dummyargs==NULL)
		return FALSE;
	BOOL bsuccess=PyArg_ParseTupleAndKeywords(dummyargs, ob, fmt, keywords,
		PyWinObject_AsJOBOBJECT_BASIC_LIMIT_INFORMATION, &jeli->BasicLimitInformation,
		PyWinObject_AsIO_COUNTERS, &jeli->IoInfo,
		&jeli->ProcessMemoryLimit,
		&jeli->JobMemoryLimit,
		&jeli->PeakProcessMemoryUsed,
		&jeli->PeakJobMemoryUsed);
	Py_DECREF(dummyargs);
	return bsuccess;
}

// @pyswig |SetInformationJobObject|Sets quotas and limits for a job
PyObject *PySetInformationJobObject(PyObject *self, PyObject *args)
{
	PyObject *objh;
	PyObject *obinfo;
	HANDLE jh;
	JOBOBJECTINFOCLASS infoclass;
	if (!PyArg_ParseTuple(args, "OkO!",
		&objh,			// @pyparm <o PyHANDLE>|Job||Handle to a job
		&infoclass,		// @pyparm int|JobObjectInfoClass||The type of data required, one of JobObject* values
		&PyDict_Type, &obinfo))		// @pyparm dict|JobObjectInfo||Dictionary containing info to be set, as returned by <om win32job.QueryInformationJobObject>
		return NULL;
	if (!PyWinObject_AsHANDLE(objh, &jh))
		return NULL;
	// @flagh JobObjectInfoClass|Type of information to be set
	switch (infoclass){
		// @flag JobObjectBasicLimitInformation|A JOBOBJECT_BASIC_LIMIT_INFORMATION dict
		case JobObjectBasicLimitInformation:{
			JOBOBJECT_BASIC_LIMIT_INFORMATION info;
			if (!PyWinObject_AsJOBOBJECT_BASIC_LIMIT_INFORMATION(obinfo, &info))
				return NULL;
			if (!SetInformationJobObject(jh, infoclass, &info, sizeof(info)))
				return PyWin_SetAPIError("SetInformationJobObject");
			break;
			}
		// @flag JobObjectExtendedLimitInformation|dict representing a JOBOBJECT_EXTENDED_LIMIT_INFORMATION struct
		case JobObjectExtendedLimitInformation:{
			JOBOBJECT_EXTENDED_LIMIT_INFORMATION info;
			if (!PyWinObject_AsJOBOBJECT_EXTENDED_LIMIT_INFORMATION(obinfo, &info))
				return NULL;
			if (!SetInformationJobObject(jh, infoclass, &info, sizeof(info)))
				return PyWin_SetAPIError("SetInformationJobObject");
			break;
			}

		// @flag JobObjectEndOfJobTimeInformation|dict representing a JOBOBJECT_END_OF_JOB_TIME_INFORMATION struct
		case JobObjectEndOfJobTimeInformation:{
			JOBOBJECT_END_OF_JOB_TIME_INFORMATION info;
			if (!PyWinObject_AsJOBOBJECT_END_OF_JOB_TIME_INFORMATION(obinfo, &info))
				return NULL;
			if (!SetInformationJobObject(jh, infoclass, &info, sizeof(info)))
				return PyWin_SetAPIError("SetInformationJobObject");
			break;
			}
		// @flag JobObjectBasicUIRestrictions|dict representing a JOBOBJECT_BASIC_UI_RESTRICTIONS struct
		case JobObjectBasicUIRestrictions:{
			JOBOBJECT_BASIC_UI_RESTRICTIONS info;
			if (!PyWinObject_AsJOBOBJECT_BASIC_UI_RESTRICTIONS(obinfo, &info))
				return NULL;
			if (!SetInformationJobObject(jh, infoclass, &info, sizeof(info)))
				return PyWin_SetAPIError("SetInformationJobObject");
			break;
			}
		// @flag JobObjectJobSetInformation|Input is a JOBOBJECT_JOBSET_INFORMATION dict - Not implemented
		// @flag JobObjectSecurityLimitInformation|Input is a JOBOBJECT_SECURITY_LIMIT_INFORMATION dict - Not implemented
		// @flag JobObjectAssociateCompletionPortInformation|Input is a JOBOBJECT_ASSOCIATE_COMPLETION_PORT dict - Not implemented
		default:
			return PyErr_Format(PyExc_NotImplementedError, "Job information class %d is not supported yet");
	}
	Py_INCREF(Py_None);
	return Py_None;
}
static PyObject *_wrap_AssignProcessToJobObject(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    HANDLE  _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OO:AssignProcessToJobObject",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsHANDLE(_obj1, &_arg1))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )AssignProcessToJobObject(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("AssignProcessToJobObject");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_CreateJobObject(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    SECURITY_ATTRIBUTES * _arg0;
    WCHAR * _arg1;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
{
	_arg1 = NULL;
}
    if(!PyArg_ParseTuple(args,"OO:CreateJobObject",&_obj0,&_obj1)) 
        return NULL;
{
	if (!PyWinObject_AsSECURITY_ATTRIBUTES(_obj0, &_arg0))
		return NULL;
}
{
	// Wide string code!
	if (!PyWinObject_AsWCHAR(_obj1, &_arg1, FALSE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )CreateJobObject(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	// Wide string cleanup
	PyWinObject_FreeWCHAR(_arg1);
}

           return PyWin_SetAPIError("CreateJobObject");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	// Wide string cleanup
	PyWinObject_FreeWCHAR(_arg1);
}
    return _resultobj;
}

static PyObject *_wrap_OpenJobObject(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    PyHANDLE  _result;
    DWORD  _arg0;
    BOOL  _arg1;
    WCHAR * _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj2 = 0;

    self = self;
{
	_arg2 = NULL;
}
    if(!PyArg_ParseTuple(args,"OiO:OpenJobObject",&_obj0,&_arg1,&_obj2)) 
        return NULL;
{
	// PyLong_AsUnsignedLongMask isn't ideal - no overflow checking - but
	// this is what the 'k' format specifier in PyArg_ParseTuple uses, and
	// that is what much of pywin32 uses for DWORDS, so we use it here too
	// Also, Python 2.3 and below will not accept a plain int for the PyLong_* functions
	#if (PY_VERSION_HEX < 0x02040000)
		{
		PyObject *tmpLong = PyNumber_Long(_obj0);
		if (tmpLong == NULL)
			return NULL;
		_arg0 = PyLong_AsUnsignedLongMask(tmpLong);
		Py_DECREF(tmpLong);
		}
	#else
		_arg0 = PyLong_AsUnsignedLongMask(_obj0);
	#endif
	if (_arg0==(DWORD)-1 && PyErr_Occurred())
		return NULL;
}
{
	// Wide string code!
	if (!PyWinObject_AsWCHAR(_obj2, &_arg2, FALSE))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (PyHANDLE )OpenJobObject(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (_result==0 || _result==INVALID_HANDLE_VALUE)  {
           {
	// Wide string cleanup
	PyWinObject_FreeWCHAR(_arg2);
}

           return PyWin_SetAPIError("OpenJobObject");
      }
}{
  _resultobj = PyWinObject_FromHANDLE(_result);
}
{
	// Wide string cleanup
	PyWinObject_FreeWCHAR(_arg2);
}
    return _resultobj;
}

static PyObject *_wrap_TerminateJobObject(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    unsigned int  _arg1;
    PyObject * _obj0 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"Oi:TerminateJobObject",&_obj0,&_arg1)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )TerminateJobObject(_arg0,_arg1);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("TerminateJobObject");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyObject *_wrap_UserHandleGrantAccess(PyObject *self, PyObject *args) {
    PyObject * _resultobj;
    BOOLAPI  _result;
    HANDLE  _arg0;
    HANDLE  _arg1;
    BOOL  _arg2;
    PyObject * _obj0 = 0;
    PyObject * _obj1 = 0;

    self = self;
    if(!PyArg_ParseTuple(args,"OOi:UserHandleGrantAccess",&_obj0,&_obj1,&_arg2)) 
        return NULL;
{
	if (!PyWinObject_AsHANDLE(_obj0, &_arg0))
		return NULL;
}
{
	if (!PyWinObject_AsHANDLE(_obj1, &_arg1))
		return NULL;
}
{
      Py_BEGIN_ALLOW_THREADS
          _result = (BOOLAPI )UserHandleGrantAccess(_arg0,_arg1,_arg2);

      Py_END_ALLOW_THREADS
      if (!_result)  {
           
           return PyWin_SetAPIError("UserHandleGrantAccess");
      }
}{
	_resultobj = Py_None;
	Py_INCREF(Py_None);
}
    return _resultobj;
}

static PyMethodDef win32jobMethods[] = {
	 { "SetInformationJobObject", PySetInformationJobObject, 1 },
	 { "QueryInformationJobObject", PyQueryInformationJobObject, 1 },
	 { "IsProcessInJob", PyIsProcessInJob, 1 },
	 { "UserHandleGrantAccess", _wrap_UserHandleGrantAccess, 1 },
	 { "TerminateJobObject", _wrap_TerminateJobObject, 1 },
	 { "OpenJobObject", _wrap_OpenJobObject, 1 },
	 { "CreateJobObject", _wrap_CreateJobObject, 1 },
	 { "AssignProcessToJobObject", _wrap_AssignProcessToJobObject, 1 },
	 { NULL, NULL }
};
static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
#if (PY_VERSION_HEX < 0x03000000)
#define MODINIT_ERROR_RETURN
SWIGEXPORT(void,initwin32job)() {
#else
#define MODINIT_ERROR_RETURN NULL
SWIGEXPORT(PyObject*,  PyInit_win32job)(void) {
#endif
	 PyObject *m, *d;
	 SWIG_globals = SWIG_newvarlink();
#if (PY_VERSION_HEX < 0x03000000)
	 m = Py_InitModule("win32job", win32jobMethods);
	 d = PyModule_GetDict(m);
#else
  static PyModuleDef win32job_def = {
    PyModuleDef_HEAD_INIT,
      "win32job",
      "",
      -1,
      win32jobMethods,
      };
  m = PyModule_Create(&win32job_def);
  if (!m)
    return NULL;
  d = PyModule_GetDict(m);
  if (!d)
    return NULL;
#endif

#ifndef SWIG_PYTHONCOM
/* This code only valid if non COM SWIG builds */
#ifndef PYCOM_EXPORT
	 PyDict_SetItemString(d,"UNICODE", PyInt_FromLong(
#ifdef UNICODE
	1
#else
	0
#endif
	));
#endif
  PyWinGlobals_Ensure();
  PyDict_SetItemString(d, "error", PyWinExc_ApiError);
#endif SWIG_PYTHONCOM

HMODULE hmodule=GetModuleHandle(L"kernel32.dll");
if (hmodule==NULL)
	hmodule=LoadLibrary(L"kernel32.dll");
if (hmodule){
	pfnIsProcessInJob=(IsProcessInJobfunc)GetProcAddress(hmodule,"IsProcessInJob");
	}

	 PyDict_SetItemString(d,"JOB_OBJECT_ASSIGN_PROCESS", PyInt_FromLong((long) JOB_OBJECT_ASSIGN_PROCESS));
	 PyDict_SetItemString(d,"JOB_OBJECT_SET_ATTRIBUTES", PyInt_FromLong((long) JOB_OBJECT_SET_ATTRIBUTES));
	 PyDict_SetItemString(d,"JOB_OBJECT_QUERY", PyInt_FromLong((long) JOB_OBJECT_QUERY));
	 PyDict_SetItemString(d,"JOB_OBJECT_TERMINATE", PyInt_FromLong((long) JOB_OBJECT_TERMINATE));
	 PyDict_SetItemString(d,"JOB_OBJECT_SET_SECURITY_ATTRIBUTES", PyInt_FromLong((long) JOB_OBJECT_SET_SECURITY_ATTRIBUTES));
	 PyDict_SetItemString(d,"JOB_OBJECT_ALL_ACCESS", PyInt_FromLong((long) JOB_OBJECT_ALL_ACCESS));
	 PyDict_SetItemString(d,"JOB_OBJECT_TERMINATE_AT_END_OF_JOB", PyInt_FromLong((long) JOB_OBJECT_TERMINATE_AT_END_OF_JOB));
	 PyDict_SetItemString(d,"JOB_OBJECT_POST_AT_END_OF_JOB", PyInt_FromLong((long) JOB_OBJECT_POST_AT_END_OF_JOB));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_END_OF_JOB_TIME", PyInt_FromLong((long) JOB_OBJECT_MSG_END_OF_JOB_TIME));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_END_OF_PROCESS_TIME", PyInt_FromLong((long) JOB_OBJECT_MSG_END_OF_PROCESS_TIME));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT", PyInt_FromLong((long) JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO", PyInt_FromLong((long) JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_NEW_PROCESS", PyInt_FromLong((long) JOB_OBJECT_MSG_NEW_PROCESS));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_EXIT_PROCESS", PyInt_FromLong((long) JOB_OBJECT_MSG_EXIT_PROCESS));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS", PyInt_FromLong((long) JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT", PyInt_FromLong((long) JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT));
	 PyDict_SetItemString(d,"JOB_OBJECT_MSG_JOB_MEMORY_LIMIT", PyInt_FromLong((long) JOB_OBJECT_MSG_JOB_MEMORY_LIMIT));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_WORKINGSET", PyInt_FromLong((long) JOB_OBJECT_LIMIT_WORKINGSET));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_PROCESS_TIME", PyInt_FromLong((long) JOB_OBJECT_LIMIT_PROCESS_TIME));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_JOB_TIME", PyInt_FromLong((long) JOB_OBJECT_LIMIT_JOB_TIME));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_ACTIVE_PROCESS", PyInt_FromLong((long) JOB_OBJECT_LIMIT_ACTIVE_PROCESS));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_AFFINITY", PyInt_FromLong((long) JOB_OBJECT_LIMIT_AFFINITY));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_PRIORITY_CLASS", PyInt_FromLong((long) JOB_OBJECT_LIMIT_PRIORITY_CLASS));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME", PyInt_FromLong((long) JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_SCHEDULING_CLASS", PyInt_FromLong((long) JOB_OBJECT_LIMIT_SCHEDULING_CLASS));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_PROCESS_MEMORY", PyInt_FromLong((long) JOB_OBJECT_LIMIT_PROCESS_MEMORY));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_JOB_MEMORY", PyInt_FromLong((long) JOB_OBJECT_LIMIT_JOB_MEMORY));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION", PyInt_FromLong((long) JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_BREAKAWAY_OK", PyInt_FromLong((long) JOB_OBJECT_LIMIT_BREAKAWAY_OK));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK", PyInt_FromLong((long) JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE", PyInt_FromLong((long) JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE));
	 PyDict_SetItemString(d,"JOB_OBJECT_LIMIT_VALID_FLAGS", PyInt_FromLong((long) JOB_OBJECT_LIMIT_VALID_FLAGS));
	 PyDict_SetItemString(d,"JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS", PyInt_FromLong((long) JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS));
	 PyDict_SetItemString(d,"JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS", PyInt_FromLong((long) JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS));
	 PyDict_SetItemString(d,"JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS", PyInt_FromLong((long) JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_NONE", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_NONE));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_HANDLES", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_HANDLES));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_READCLIPBOARD", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_READCLIPBOARD));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_WRITECLIPBOARD", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_WRITECLIPBOARD));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_DISPLAYSETTINGS", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_DISPLAYSETTINGS));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_GLOBALATOMS", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_GLOBALATOMS));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_DESKTOP", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_DESKTOP));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_EXITWINDOWS", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_EXITWINDOWS));
	 PyDict_SetItemString(d,"JOB_OBJECT_UILIMIT_ALL", PyInt_FromLong((long) JOB_OBJECT_UILIMIT_ALL));
	 PyDict_SetItemString(d,"JOB_OBJECT_UI_VALID_FLAGS", PyInt_FromLong((long) JOB_OBJECT_UI_VALID_FLAGS));
	 PyDict_SetItemString(d,"JOB_OBJECT_SECURITY_NO_ADMIN", PyInt_FromLong((long) JOB_OBJECT_SECURITY_NO_ADMIN));
	 PyDict_SetItemString(d,"JOB_OBJECT_SECURITY_RESTRICTED_TOKEN", PyInt_FromLong((long) JOB_OBJECT_SECURITY_RESTRICTED_TOKEN));
	 PyDict_SetItemString(d,"JOB_OBJECT_SECURITY_ONLY_TOKEN", PyInt_FromLong((long) JOB_OBJECT_SECURITY_ONLY_TOKEN));
	 PyDict_SetItemString(d,"JOB_OBJECT_SECURITY_FILTER_TOKENS", PyInt_FromLong((long) JOB_OBJECT_SECURITY_FILTER_TOKENS));
	 PyDict_SetItemString(d,"JOB_OBJECT_SECURITY_VALID_FLAGS", PyInt_FromLong((long) JOB_OBJECT_SECURITY_VALID_FLAGS));
	 PyDict_SetItemString(d,"JobObjectBasicAccountingInformation", PyInt_FromLong((long) JobObjectBasicAccountingInformation));
	 PyDict_SetItemString(d,"JobObjectBasicLimitInformation", PyInt_FromLong((long) JobObjectBasicLimitInformation));
	 PyDict_SetItemString(d,"JobObjectBasicProcessIdList", PyInt_FromLong((long) JobObjectBasicProcessIdList));
	 PyDict_SetItemString(d,"JobObjectBasicUIRestrictions", PyInt_FromLong((long) JobObjectBasicUIRestrictions));
	 PyDict_SetItemString(d,"JobObjectSecurityLimitInformation", PyInt_FromLong((long) JobObjectSecurityLimitInformation));
	 PyDict_SetItemString(d,"JobObjectEndOfJobTimeInformation", PyInt_FromLong((long) JobObjectEndOfJobTimeInformation));
	 PyDict_SetItemString(d,"JobObjectAssociateCompletionPortInformation", PyInt_FromLong((long) JobObjectAssociateCompletionPortInformation));
	 PyDict_SetItemString(d,"JobObjectBasicAndIoAccountingInformation", PyInt_FromLong((long) JobObjectBasicAndIoAccountingInformation));
	 PyDict_SetItemString(d,"JobObjectExtendedLimitInformation", PyInt_FromLong((long) JobObjectExtendedLimitInformation));
	 PyDict_SetItemString(d,"JobObjectJobSetInformation", PyInt_FromLong((long) JobObjectJobSetInformation));
	 PyDict_SetItemString(d,"MaxJobObjectInfoClass", PyInt_FromLong((long) MaxJobObjectInfoClass));
#if (PY_VERSION_HEX > 0x03000000)
	return m;
#endif
}
